// code generated using pythonref/generate_hashtopoint_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_HashToPoint.sol";
import "../src/ZKNOX_falcon.sol";
import "../src/ZKNOX_ethfalcon.sol";
import "../src/ZKNOX_NTT_falcon.sol";
import "../src/ZKNOX_falcon_encodings.sol";

contract Benchmark is Test {
    ZKNOX_falcon falcon;
    ZKNOX_ethfalcon ethfalcon;

    // forgefmt: disable-next-line
	uint256[]  f = [9999, 7085, 6820, 8778, 6376, 3654, 751, 8032, 9000, 7804, 1199, 698, 11321, 9441, 11590, 1244, 4515, 10616, 6860, 441, 6800, 11579, 4591, 5953, 10392, 4264, 2672, 10279, 1124, 2490, 3242, 6344, 5052, 1585, 4677, 3186, 4500, 6989, 439, 2822, 12191, 8937, 1146, 10412, 9422, 8183, 6233, 12110, 10972, 7139, 4359, 5441, 171, 7485, 579, 7478, 8148, 523, 8046, 11529, 5261, 11343, 478, 11537, 8707, 1510, 4800, 3705, 6474, 8752, 10907, 5380, 2680, 2901, 8837, 174, 7393, 11327, 3000, 2962, 10762, 7159, 8732, 7335, 11165, 6400, 12254, 437, 7048, 763, 4495, 1246, 6650, 5548, 3303, 2931, 4471, 5342, 1372, 3210, 11499, 8447, 2992, 1331, 9795, 4331, 11998, 10437, 256, 8575, 3680, 8881, 11551, 8194, 5884, 8706, 209, 6116, 8410, 1267, 12001, 12014, 3395, 10985, 9744, 4718, 2837, 253, 5994, 10098, 1209, 1776, 3579, 11570, 3584, 8590, 2377, 5086, 6065, 4455, 8477, 11240, 1822, 3409, 8505, 210, 753, 11201, 5575, 8074, 5896, 4296, 186, 9500, 1067, 7082, 373, 6179, 2421, 3628, 8590, 11689, 6489, 6551, 8331, 10160, 1585, 8286, 799, 10449, 8457, 11846, 5133, 10416, 11189, 8187, 8623, 10356, 11588, 2870, 5605, 6259, 1407, 2593, 6225, 7484, 9443, 6445, 3625, 9208, 2332, 431, 11337, 9534, 6147, 5040, 545, 11742, 6332, 6725, 6040, 3370, 7499, 4852, 2916, 808, 9664, 10995, 10026, 12143, 8422, 2811, 3387, 10, 2568, 5567, 7382, 2162, 8864, 11244, 3273, 6476, 4174, 12066, 2462, 1188, 4064, 4948, 4334, 3219, 9572, 9314, 672, 4486, 9624, 4458, 11150, 804, 7908, 1939, 6524, 3338, 4090, 11839, 3566, 4053, 5510, 1824, 3590, 4512, 7475, 6840, 6576, 3581, 4794, 1295, 5474, 7370, 10342, 11576, 6954, 9507, 6341, 7708, 8462, 623, 10455, 1541, 1594, 3792, 8428, 5141, 6225, 7364, 11122, 6508, 2612, 11177, 5824, 2083, 6083, 11117, 11272, 3482, 1941, 9261, 11511, 1737, 11921, 8655, 11129, 8438, 4302, 3417, 5024, 11466, 11899, 9353, 7791, 9025, 7296, 4018, 10424, 7731, 11727, 6659, 2313, 8413, 683, 65, 2686, 4672, 9454, 329, 8409, 4128, 6098, 8959, 483, 8285, 7679, 8206, 11528, 830, 9903, 4553, 1983, 2615, 5720, 7285, 5117, 11315, 6235, 9229, 5817, 8071, 8875, 7024, 8567, 6100, 10668, 205, 7304, 281, 12242, 9947, 1653, 9104, 3412, 6728, 4368, 1804, 6962, 10170, 7739, 3254, 10975, 12197, 1218, 1816, 5613, 313, 7621, 594, 5447, 12164, 8562, 10386, 6368, 9309, 8303, 7136, 7366, 5550, 8623, 4376, 6385, 4930, 3184, 10000, 8112, 8324, 3566, 6386, 10547, 108, 95, 3433, 757, 2675, 8604, 7700, 3169, 4135, 272, 10108, 3674, 4476, 3684, 2662, 12105, 4869, 4321, 10208, 5599, 4868, 9853, 7446, 7440, 4281, 7633, 10743, 5528, 11175, 1841, 1030, 6640, 3909, 274, 1231, 2112, 5318, 8734, 9417, 10719, 10515, 10507, 151, 9255, 5479, 7751, 9110, 10075, 712, 6244, 2837, 6071, 3809, 12200, 6716, 5507, 10742, 5016, 2999, 5379, 8065, 4024, 10958, 8328, 5454, 10131, 6814, 5121, 4739, 132, 11121, 6487, 8948, 3515, 8429, 3096, 3514, 11468, 7402, 3186, 7126, 6968, 9720, 6853, 8190, 7780, 7266, 3759, 6383, 3490, 1828, 4248, 5327, 4740, 9462, 8450, 10998, 6238, 11283, 6074, 8314, 11629, 11905, 10089, 12099, 3489, 2352, 8721, 416, 8068, 8319, 213, 5593, 4978, 2617, 3447, 11486, 5677, 10457, 4227, 209, 6519, 639, 5568, 7873, 11843, 11108];
    // forgefmt: disable-next-line
    uint256[] pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
    bytes message =
        "\x4d\x79\x20\x6e\x61\x6d\x65\x20\x69\x73\x20\x52\x65\x6e\x61\x75\x64\x20\x66\x72\x6f\x6d\x20\x5a\x4b\x4e\x4f\x58\x21\x21\x21\x21";

    function setUp() public {
        // bytes32 salt = keccak256(abi.encodePacked("ZKnox"));
        falcon = new ZKNOX_falcon();
        ethfalcon = new ZKNOX_ethfalcon();
    }

    function testBenchmarkNTT() public view {
        // a NTT of a polynomial of degree 512
        uint256 gasStart = gasleft();
        // this doesn't make sense because pkc is already in NTT domain
        uint256[] memory pkc_ntt = _ZKNOX_NTTFW_vectorized(pkc);
        uint256 gasUsed = gasStart - gasleft();
        console.log("NTT cost:              ", gasUsed);
        pkc_ntt[0] = 0; // in order to remove warnings
    }

    function testBenchmarkiNTT() public view {
        // a NTT of a polynomial of degree 512
        uint256 gasStart = gasleft();
        // Compute the inverse NTT of the pk
        uint256[] memory pkc_invntt = _ZKNOX_NTTINV_vectorized(pkc);
        uint256 gasUsed = gasStart - gasleft();
        console.log("iNTT cost:             ", gasUsed);
        pkc_invntt[0] = 0; // in order to remove warnings
    }

    function testBenchFalconCore() public view {
        // verify the core algorithm of Falcon
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21299671975787483454790402018496259712325154098698828370862796902048963440524, 226482644561092801897613003311591793491464477287443953390217386369311322015, 122241768215234212762829461233206915525091542269434133652196666067046117266, 17998600124730622827465990899026975431920967581729901424009026369714323515, 21156552726390114447912652470199481904643883857534790873521589824973084372941, 166414638319359694539675323431761741043307735201951903340794358417336827986, 21451614924126190838060080098931214529037792752475566277715416002725544210312, 21619468086225573149428575687681504604739876340506400383036250394919471022197, 21354444752013408991527203716041803392832851588841014790823564527783031812068, 40637590359720631756101950821212066384251755770640449468737583935557545897, 304228256065111465341595114396824176330096899003450390299007497041692078041, 21151253506241730037214008021307237001806313126801305624031661634239557730460, 120468666454760826934618408257990251737086348137219304739400371046851555278, 21432184616009917607269660114506949891222288898806366184877936761055983775547, 21518433259746648670717331844331216366351090502579212557941552317525499248692, 21647739391709647690802008982923383029008210205554608875280491239402655592366, 40964884159568868602122268505814142421304112730977685866577034491435560785, 134281644066644075952295235160147398920909894081157681132255108571974992066, 21691911382121948660240887888667851751942217725501296445477391473357788557231, 21696886004442863450261761150950129663128179474933041610268931151502459731982, 404610463137767168486106082172428680248662411074833208161405963809904656482, 91879772852911984237518509646383898093449686531778472006833239623202058238, 164644178638518845312982181671048221605431573972257798857853361098856857728, 21574973686812103371699961732701920024338479494313547651614704632000563981947, 175245562549033153724892418326575979114467271119590358939154166249244262574, 266796661751086246441058213427294247068745218289871840260809319750822854698, 97183598268319474873784359172567103256595448544293089836817574924407079179, 86576072396373326456075399840772528545065258380973319625452012942335356845, 208817323379001257158570910002768001779019792526753026636949068845966164023, 21082022843605336096552002185742069167530055866640863550830674291014571601566, 21458687219065978677109946072223714604125558224559441365838144304995083419665, 666423492797790993818496611161184796611027378170087972178025157084774543202];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // forgefmt: disable-next-line
        uint256[512] memory _hashed = [uint256(4643), 8890, 7599, 3818, 3920, 156, 1149, 8934, 2177, 8085, 3571, 5176, 6195, 2666, 3782, 1481, 9991, 1314, 6137, 9729, 10248, 1211, 7215, 6779, 4329, 285, 5149, 4641, 5853, 4677, 10238, 10810, 12061, 8024, 547, 9764, 11118, 4432, 1206, 9724, 12243, 3217, 1119, 9214, 9297, 9115, 5399, 2488, 159, 9702, 12203, 11928, 2696, 9069, 2892, 1436, 7397, 9593, 3074, 2929, 3722, 3847, 4011, 7200, 7563, 2968, 6857, 272, 10484, 7628, 3326, 2629, 5481, 4177, 2713, 6396, 2392, 5669, 6300, 11422, 4572, 4440, 3638, 562, 7443, 5049, 1336, 923, 6322, 9624, 7510, 5699, 10217, 11982, 2092, 1242, 8500, 3854, 6752, 4606, 2039, 8910, 8149, 11253, 1588, 4729, 9885, 2526, 3485, 2216, 6910, 2091, 10835, 6624, 1778, 1195, 9435, 3681, 11191, 10268, 195, 4677, 2600, 1128, 5404, 5380, 9977, 1839, 6141, 4549, 8937, 2473, 7771, 7985, 1914, 10772, 3445, 3364, 11784, 4657, 2323, 8788, 2472, 4769, 3011, 8595, 3074, 1892, 6376, 3904, 3446, 7516, 4415, 10366, 9636, 11954, 11878, 3180, 11109, 5140, 6362, 6127, 3822, 8578, 2859, 2387, 9325, 3062, 605, 10202, 8984, 2613, 3375, 5895, 6762, 192, 7622, 8228, 2938, 4234, 1018, 4259, 9378, 10922, 11652, 9530, 9314, 12124, 6133, 11593, 11858, 9038, 1367, 1436, 5660, 3774, 11685, 5890, 5036, 11295, 4455, 3855, 8347, 7870, 4321, 2915, 10110, 6989, 12087, 2667, 6395, 6842, 6468, 3482, 5386, 1876, 5795, 5000, 4194, 1668, 136, 11289, 8610, 4883, 11046, 9285, 3780, 10377, 4139, 4213, 4989, 6218, 908, 2395, 8042, 3832, 6410, 4365, 1574, 10695, 10425, 1778, 3156, 2475, 5593, 6396, 10559, 8645, 5170, 4844, 759, 6009, 7843, 5304, 8342, 8425, 11498, 5621, 10536, 11707, 11507, 1208, 11843, 6613, 9824, 1545, 5848, 917, 1781, 4129, 3054, 1140, 9875, 8446, 3651, 607, 10838, 5784, 5525, 5344, 2376, 8152, 7705, 5265, 6002, 8928, 2477, 201, 4861, 9317, 9587, 8528, 2301, 12104, 8797, 5737, 10792, 2983, 8754, 11072, 11951, 1319, 9808, 4398, 4209, 1498, 10667, 4630, 1844, 7433, 1903, 5552, 11065, 9401, 7713, 4533, 10525, 10555, 1364, 3297, 2995, 12002, 9199, 3805, 11585, 11133, 8717, 7370, 7154, 9828, 9518, 11217, 3095, 11110, 3330, 5230, 2807, 7888, 3313, 11804, 8944, 4971, 7036, 10781, 5117, 4554, 2957, 10934, 2954, 1881, 4816, 4556, 8442, 5080, 5897, 1248, 9823, 1271, 1577, 2341, 3133, 6588, 8798, 5466, 2465, 2429, 10531, 7561, 9941, 4334, 716, 5606, 8928, 9566, 4675, 533, 5409, 1384, 1624, 3916, 6110, 3631, 787, 9276, 644, 3279, 10623, 8724, 293, 12108, 5, 3878, 9924, 7676, 3866, 11394, 8104, 78, 1641, 10334, 4568, 984, 7328, 5142, 10013, 8221, 7457, 4188, 1112, 9472, 819, 6785, 1064, 5617, 10254, 1028, 4622, 5498, 9294, 3685, 2143, 5292, 4317, 11731, 5047, 6368, 158, 832, 1242, 6384, 6926, 2302, 5521, 2676, 11311, 7986, 3152, 2622, 7745, 7942, 3125, 10401, 4920, 3832, 6122, 10299, 2418, 7563, 7429, 3658, 818, 3972, 10763, 8486, 4864, 9401, 6514, 8531, 2133, 9360, 1175, 3871, 8258, 3723, 11227, 2871, 550, 7585, 7780, 1988, 6916, 3820, 1291, 8115, 4404, 11804, 10995, 200, 10546, 10324, 11567, 2950, 7969, 3232, 3366, 8458, 12075, 11551, 6115, 5759, 8152, 5996, 6451, 10922, 9977, 6001, 2342, 10608, 10661, 4679, 12055, 10269, 3864, 10006, 7852, 9161, 9654, 9147, 8081, 5935, 7014, 5112];
        uint256[] memory hashed = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            hashed[i] = _hashed[i];
        }
        uint256 gasStart = gasleft();
        bool result = falcon_core(s2, pkc, hashed);
        uint256 gasUsed = gasStart - gasleft();
        console.log("Falcon core cost:      ", gasUsed);
        assertEq(true, result);
    }

    function testBenchHashToPointNIST() public view {
        // Hash to point NIST (with SHAKE256)
        bytes memory salt =
            "\x4b\x09\x9f\x8e\x30\x0f\x01\xb8\x65\x0f\x1f\x4b\x1d\x8f\xcf\x3f\x3c\xb5\x3f\xb8\xe9\xeb\x2e\xa2\x03\xbd\xc9\x70\xf5\x0a\xe5\x54\x28\xa9\x1f\x7f\x53\xac\x26\x6b";
        // forgefmt: disable-next-line
        uint256[512] memory expected_hash = [uint256(2578), 9409,5446,11883,3141,10060,11878,2420,7205,5080,10356,9921,7102,11023,6011,9087,3599,20,7901,11170,5751,3435,9682,7761,751,10853,2087,138,9813,9210,5348,625,7844,7825,1395,3704,9025,1402,1686,6174,1459,8095,1538,5296,3942,4491,11654,11409,8189,6166,5299,9446,7070,1023,7288,575,4127,4182,9690,667,1927,1261,6218,7417,11916,2011,5526,7301,6685,7671,1196,12278,1340,11667,7567,4136,10605,4460,2740,6759,1002,754,2266,1417,12188,3713,10022,7250,11942,2047,2118,9458,9926,7800,11434,1225,8524,8696,6461,2345,6570,3212,9584,11852,902,5535,8020,11218,5232,511,2979,3417,11281,10322,1843,11790,9924,12085,2168,11716,8611,4007,251,8772,11543,2578,11631,10600,11424,5082,9825,11065,247,1753,333,12060,10996,8341,8581,11516,7970,10085,2403,10978,9587,6629,6112,7858,8080,7677,3913,5637,5152,11786,7969,5935,6137,5239,12139,3724,9284,10885,3224,11068,10053,4605,11219,11437,7357,8408,11196,2873,5926,4809,9957,3091,9672,1994,4145,5127,897,1047,5719,8405,5531,9439,1373,5438,3809,11485,6882,3195,8979,7196,5540,4256,11085,8518,1031,3717,7876,89,2310,923,1685,5207,12263,3550,1723,6275,3451,5655,2160,1591,9791,8490,7642,8372,11105,8818,8291,959,1466,7057,223,1507,5593,3827,3875,6597,7681,11173,8013,1854,10372,3488,9631,6907,2911,9548,8230,2931,6267,4819,7631,6094,4903,9817,1684,8998,2386,11461,9997,11116,6432,5571,6727,7972,10041,9139,4132,6475,11364,5765,7761,5555,10409,11991,10168,11657,12040,5071,1896,11967,4211,8906,4578,2693,5837,9493,1420,6334,5660,3658,5819,10837,2481,10373,5906,7465,7562,5848,4466,555,10501,8367,8391,11279,3281,6665,1365,10369,1647,1571,8623,8190,2287,2200,6337,6082,8137,10740,7609,8577,1469,6001,266,2833,6206,8418,6137,10730,4439,8434,10389,9765,7615,3453,9780,2428,10821,4544,12266,4477,4763,3413,3227,9305,11773,3566,4940,1919,1228,4795,5853,10174,10994,6469,10058,965,7086,7250,7799,6692,7233,6027,3006,3989,4753,1429,7744,2584,9303,11600,5184,2175,581,1243,4601,3750,4732,5698,5537,11955,4306,483,318,647,9607,6258,11739,17,11364,6217,8753,12215,779,3718,6078,1005,1894,8518,4480,789,8194,9874,10458,10601,10640,10834,3488,6354,10427,11774,7439,10555,5983,10090,4676,2705,4003,6519,4434,6003,4525,8094,3662,4740,6447,5414,4424,7459,8855,8159,10700,86,5077,8353,10565,10555,6325,2427,835,6946,6906,4329,9515,8622,1665,7462,6355,5039,6742,519,8233,6556,8955,11872,7619,1059,6647,2277,5209,81,8776,2841,447,3836,3777,8029,3574,11305,3874,11476,1641,1857,5582,8087,8932,9699,6948,807,1648,12103,3420,9708,8352,9546,2769,12152,12086,1743,6860,3325,4490,463,11764,9721,1450,12103,4950,5458,8619,409,4975,5939,3304,5688,3555,957,3900,6425,6146,8633,11584,1050,2687,4941,7067,9688,1913,11296];
        uint256 gasStart = gasleft();
        uint256[] memory hash = hashToPointNIST(salt, message);
        uint256 gasUsed = gasStart - gasleft();
        console.log("NIST HashToPoint cost: ", gasUsed);
        for (uint256 i = 0; i < n; i++) {
            assertEq(hash[i], expected_hash[i]);
        }
    }

    function testBenchHashToPointRIP() public view {
        // Hash to point RIP (with Keccak-CTR PRNG)
        bytes memory salt =
            "\x46\xb9\xdd\x2b\x0b\xa8\x8d\x13\x23\x3b\x3f\xeb\x74\x3e\xeb\x24\x3f\xcd\x52\xea\x62\xb8\x1b\x82\xb5\x0c\x27\x64\x6e\xd5\x76\x2f\xd7\x5d\xc4\xdd\xd8\xc0\xf2\x00";
        // forgefmt: disable-next-line
        uint256[512] memory expected_hash = [uint256(3464), 4265,6929,6688,7891,9017,7649,5630,9109,7790,11684,89,4880,11781,7200,3831,1956,9625,2825,1981,6862,93,10953,8813,618,7048,3942,1415,450,6514,1319,11725,11260,3563,3394,11707,8450,4542,5045,2423,2880,11557,1710,7278,10898,7701,11869,8622,3866,3774,9709,8811,3428,723,2177,10499,10418,8748,6768,1225,11805,10814,2320,2229,6356,4577,1240,575,4455,3968,372,10325,9178,2063,10014,3797,1469,7640,10912,3383,10547,9284,7105,5014,6151,5400,2940,4659,3972,5955,11345,10547,4179,9488,973,7327,4816,8435,5185,7706,5974,8470,12255,380,328,7243,9388,1306,8487,7643,2718,3354,9461,9729,1717,12154,11674,5766,3638,6532,11283,6651,1053,810,10083,8277,8845,3236,6061,3677,755,1901,8529,2261,6623,5983,6017,7183,11867,3861,10471,7922,2694,4281,5871,9086,11392,8704,2461,8634,601,11444,11445,3353,11926,4115,1673,4065,4766,10392,10502,9829,6127,10920,11385,8572,11532,70,7932,615,2499,4753,3312,5493,3488,1171,4835,6669,10870,1944,2729,8504,9424,8109,9084,11686,6165,807,1470,10634,2015,5658,7560,6964,6955,4832,8588,6959,360,10700,51,5863,12083,6763,3778,3809,937,4077,9092,11099,2943,1523,330,11682,11217,1588,3309,3563,7434,11464,3589,2067,5428,11185,833,11758,7584,1228,554,3324,4646,7680,1876,5777,9128,10700,1351,9549,762,10416,1209,6206,2151,4866,11969,7769,8702,10292,6356,1156,4726,9449,10751,9630,5717,959,9830,1271,6397,6006,11205,509,2182,8619,11994,3616,1599,306,10375,8109,645,8212,12105,6981,6814,5735,8117,8822,3116,7904,2079,4549,7464,4541,8296,7539,9062,5665,809,9645,878,4903,10799,8885,8210,4719,4948,9640,436,11538,10188,10772,7385,11412,2467,3687,8303,2329,5335,4868,10992,2755,7554,2524,12147,3701,11988,2010,3807,2854,4659,3021,10030,3410,8058,7103,477,10099,8993,1392,8486,478,4059,7121,10192,5956,11428,299,5068,6509,4975,9878,2288,6935,11597,1304,4290,3474,9489,3368,3582,10475,1967,3569,7131,4942,9784,69,1713,11136,3546,10222,9278,9358,7249,5572,5887,3800,1192,1929,4424,1073,11740,3418,10883,295,215,11517,2569,3894,4594,406,10772,9601,10743,6989,12161,7996,10073,3379,10636,6807,12197,7805,5531,3811,9170,7308,1101,7215,2110,9021,1874,3194,466,856,3474,1679,1404,8014,10128,11246,3166,2360,8532,4312,538,9353,9554,11116,7730,11758,3732,3415,1946,7230,10984,4919,6214,75,10808,3962,4213,10705,11826,11130,8562,11259,843,8709,11248,9296,2773,9756,6958,4053,7149,5567,8207,12157,7443,10924,7680,1116,3777,2069,6300,10749,4528,5966,10398,2062,5941,5159,7522,4406,7584,1379,1381,2405,6618,7338,5156,8683,9305,6257,11491,3019,8951,7453,11287,4834,4941,8300,1746,544,4873,2302,6297,8694,2805,1237,8867,2849,9692,9808,2354,9417,10693,3504,2938,4347,5853,12167,1771,9576,11979,11364,9023,10152,3792,2514];
        uint256 gasStart = gasleft();
        uint256[] memory hash = hashToPointRIP(salt, message);
        uint256 gasUsed = gasStart - gasleft();
        console.log("RIP HashToPoint cost:  ", gasUsed);
        for (uint256 i = 0; i < n; i++) {
            assertEq(hash[i], expected_hash[i]);
        }
    }

    function testBenchDecompressKAT() public view {
        // a verificaiton of Falcon signature from NIST KAT vectors
        // forgefmt: disable-next-line
        bytes memory pk=hex"096BA86CB658A8F445C9A5E4C28374BEC879C8655F68526923240918074D0147C03162E4A49200648C652803C6FD7509AE9AA799D6310D0BD42724E0635920186207000767CA5A8546B1755308C304B84FC93B069E265985B398D6B834698287FF829AA820F17A7F4226AB21F601EBD7175226BAB256D8888F009032566D6383D68457EA155A94301870D589C678ED304259E9D37B193BC2A7CCBCBEC51D69158C44073AEC9792630253318BC954DBF50D15028290DC2D309C7B7B02A6823744D463DA17749595CB77E6D16D20D1B4C3AAD89D320EBE5A672BB96D6CD5C1EFEC8B811200CBB062E473352540EDDEF8AF9499F8CDD1DC7C6873F0C7A6BCB7097560271F946849B7F373640BB69CA9B518AA380A6EB0A7275EE84E9C221AED88F5BFBAF43A3EDE8E6AA42558104FAF800E018441930376C6F6E751569971F47ADBCA5CA00C801988F317A18722A29298925EA154DBC9024E120524A2D41DC0F18FD8D909F6C50977404E201767078BA9A1F9E40A8B2BA9C01B7DA3A0B73A4C2A6B4F518BBEE3455D0AF2204DDC031C805C72CCB647940B1E6794D859AAEBCEA0DEB581D61B9248BD9697B5CB974A8176E8F910469CAE0AB4ED92D2AEE9F7EB50296DAF8057476305C1189D1D9840A0944F0447FB81E511420E67891B98FA6C257034D5A063437D379177CE8D3FA6EAF12E2DBB7EB8E498481612B1929617DA5FB45E4CDF893927D8BA842AA861D9C50471C6D0C6DF7E2BB26465A0EB6A3A709DE792AAFAAF922AA95DD5920B72B4B8856C6E632860B10F5CC08450003671AF388961872B466400ADB815BA81EA794945D19A100622A6CA0D41C4EA620C21DC125119E372418F04402D9FA7180F7BC89AFA54F8082244A42F46E5B5ABCE87B50A7D6FEBE8D7BBBAC92657CBDA1DB7C25572A4C1D0BAEA30447A865A2B1036B880037E2F4D26D453E9E913259779E9169B28A62EB809A5C744E04E260E1F2BBDA874F1AC674839DDB47B3148C5946DE0180148B7973D63C58193B17CD05D16E80CD7928C2A338363A23A81C0608C87505589B9DA1C617E7B70786B6754FBB30A5816810B9E126CFCC5AA49326E9D842973874B6359B5DB75610BA68A98C7B5E83F125A82522E13B83FB8F864E2A97B73B5D544A7415B6504A13939EAB1595D64FAF41FAB25A864A574DE524405E878339877886D2FC07FA0311508252413EDFA1158466667AFF78386DAF7CB4C9B850992F96E20525330599AB601D454688E294C8C3E";
        // forgefmt: disable-next-line
        bytes memory sm=hex

        uint256[] memory kpub;
        uint256[] memory s2;
        bytes memory salt;
        bytes memory message;

        uint256 gasStart = gasleft();
        (kpub, s2, salt, message) = decompress_KAT(pk, sm);
        uint256[] memory ntth = _ZKNOX_NTT_Compact(_ZKNOX_NTTFW_vectorized(kpub));
        uint256 gasUsed = gasStart - gasleft();
        console.log("Decompress KAT cost:   ", gasUsed);
    }

    function testBenchVerifyNISTCompliant() public view {
        // forgefmt: disable-next-line
        bytes memory pk=hex"096BA86CB658A8F445C9A5E4C28374BEC879C8655F68526923240918074D0147C03162E4A49200648C652803C6FD7509AE9AA799D6310D0BD42724E0635920186207000767CA5A8546B1755308C304B84FC93B069E265985B398D6B834698287FF829AA820F17A7F4226AB21F601EBD7175226BAB256D8888F009032566D6383D68457EA155A94301870D589C678ED304259E9D37B193BC2A7CCBCBEC51D69158C44073AEC9792630253318BC954DBF50D15028290DC2D309C7B7B02A6823744D463DA17749595CB77E6D16D20D1B4C3AAD89D320EBE5A672BB96D6CD5C1EFEC8B811200CBB062E473352540EDDEF8AF9499F8CDD1DC7C6873F0C7A6BCB7097560271F946849B7F373640BB69CA9B518AA380A6EB0A7275EE84E9C221AED88F5BFBAF43A3EDE8E6AA42558104FAF800E018441930376C6F6E751569971F47ADBCA5CA00C801988F317A18722A29298925EA154DBC9024E120524A2D41DC0F18FD8D909F6C50977404E201767078BA9A1F9E40A8B2BA9C01B7DA3A0B73A4C2A6B4F518BBEE3455D0AF2204DDC031C805C72CCB647940B1E6794D859AAEBCEA0DEB581D61B9248BD9697B5CB974A8176E8F910469CAE0AB4ED92D2AEE9F7EB50296DAF8057476305C1189D1D9840A0944F0447FB81E511420E67891B98FA6C257034D5A063437D379177CE8D3FA6EAF12E2DBB7EB8E498481612B1929617DA5FB45E4CDF893927D8BA842AA861D9C50471C6D0C6DF7E2BB26465A0EB6A3A709DE792AAFAAF922AA95DD5920B72B4B8856C6E632860B10F5CC08450003671AF388961872B466400ADB815BA81EA794945D19A100622A6CA0D41C4EA620C21DC125119E372418F04402D9FA7180F7BC89AFA54F8082244A42F46E5B5ABCE87B50A7D6FEBE8D7BBBAC92657CBDA1DB7C25572A4C1D0BAEA30447A865A2B1036B880037E2F4D26D453E9E913259779E9169B28A62EB809A5C744E04E260E1F2BBDA874F1AC674839DDB47B3148C5946DE0180148B7973D63C58193B17CD05D16E80CD7928C2A338363A23A81C0608C87505589B9DA1C617E7B70786B6754FBB30A5816810B9E126CFCC5AA49326E9D842973874B6359B5DB75610BA68A98C7B5E83F125A82522E13B83FB8F864E2A97B73B5D544A7415B6504A13939EAB1595D64FAF41FAB25A864A574DE524405E878339877886D2FC07FA0311508252413EDFA1158466667AFF78386DAF7CB4C9B850992F96E20525330599AB601D454688E294C8C3E";
        // forgefmt: disable-next-line
        bytes memory sm=hex

        uint256[] memory kpub;
        uint256[] memory s2;

        uint256[] memory cs2;
        bytes memory salt;
        bytes memory m;

        uint256 gasStart = gasleft();
        (kpub, s2, salt, m) = decompress_KAT(pk, sm);
        uint256[] memory ntth = _ZKNOX_NTT_Compact(_ZKNOX_NTTFW_vectorized(kpub));
        cs2 = _ZKNOX_NTT_Compact(s2);
        bool result = falcon.verify(m, salt, cs2, ntth);
        uint256 gasUsed = gasStart - gasleft();
        console.log("Verify NIST compliant cost:", gasUsed);
        assertEq(true, result);
    }

    function testBenchVerifyNIST() public view {
        // a verificaiton of Falcon signature
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21299671975787483454790402018496259712325154098698828370862796902048963440524, 226482644561092801897613003311591793491464477287443953390217386369311322015, 122241768215234212762829461233206915525091542269434133652196666067046117266, 17998600124730622827465990899026975431920967581729901424009026369714323515, 21156552726390114447912652470199481904643883857534790873521589824973084372941, 166414638319359694539675323431761741043307735201951903340794358417336827986, 21451614924126190838060080098931214529037792752475566277715416002725544210312, 21619468086225573149428575687681504604739876340506400383036250394919471022197, 21354444752013408991527203716041803392832851588841014790823564527783031812068, 40637590359720631756101950821212066384251755770640449468737583935557545897, 304228256065111465341595114396824176330096899003450390299007497041692078041, 21151253506241730037214008021307237001806313126801305624031661634239557730460, 120468666454760826934618408257990251737086348137219304739400371046851555278, 21432184616009917607269660114506949891222288898806366184877936761055983775547, 21518433259746648670717331844331216366351090502579212557941552317525499248692, 21647739391709647690802008982923383029008210205554608875280491239402655592366, 40964884159568868602122268505814142421304112730977685866577034491435560785, 134281644066644075952295235160147398920909894081157681132255108571974992066, 21691911382121948660240887888667851751942217725501296445477391473357788557231, 21696886004442863450261761150950129663128179474933041610268931151502459731982, 404610463137767168486106082172428680248662411074833208161405963809904656482, 91879772852911984237518509646383898093449686531778472006833239623202058238, 164644178638518845312982181671048221605431573972257798857853361098856857728, 21574973686812103371699961732701920024338479494313547651614704632000563981947, 175245562549033153724892418326575979114467271119590358939154166249244262574, 266796661751086246441058213427294247068745218289871840260809319750822854698, 97183598268319474873784359172567103256595448544293089836817574924407079179, 86576072396373326456075399840772528545065258380973319625452012942335356845, 208817323379001257158570910002768001779019792526753026636949068845966164023, 21082022843605336096552002185742069167530055866640863550830674291014571601566, 21458687219065978677109946072223714604125558224559441365838144304995083419665, 666423492797790993818496611161184796611027378170087972178025157084774543202];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        bytes memory salt =
            "\xab\x0b\xae\x31\x63\x39\x89\x43\x04\xe3\x58\x77\xb0\xc2\x8a\x9b\x1f\xd1\x66\xc7\x96\xb9\xcc\x25\x8a\x06\x4a\x8f\x57\xe2\x7f\x2a\x5b\x8d\x54\x8a\x72\x8c\x94\x44";
        uint256 gasStart = gasleft();
        bool result = falcon.verify(message, salt, s2, pkc);
        uint256 gasUsed = gasStart - gasleft();
        console.log("Verify NIST cost:      ", gasUsed);
        assertEq(true, result);
    }

    function testBenchVerifyRIP() public view {
        // a verification of ETHFalcon signature
        // signature s2 = [12205, 12232, 146, 280, 180, 43, 12281, 12002, 126, 12204, 17, 74, 12196, 360, 189, 128, 39, 104, 12143, 81, 54, 17, 103, 12249, 12261, 12227, 12170, 12184, 12199, 180, 9, 12204, 198, 135, 12244, 12132, 12257, 12249, 27, 12030, 340, 48, 12185, 12270, 206, 12139, 47, 51, 44, 11998, 12196, 251, 6, 12185, 12095, 157, 12013, 187, 19, 227, 173, 103, 14, 12256, 161, 378, 12245, 12131, 12268, 11886, 184, 11999, 12257, 229, 12003, 64, 15, 11997, 12288, 70, 12015, 12258, 12188, 194, 12162, 122, 12269, 21, 292, 11961, 210, 12152, 12147, 147, 90, 12036, 101, 12215, 198, 12136, 12152, 14, 12278, 198, 23, 12253, 12181, 12220, 25, 15, 10, 11972, 4, 104, 12285, 0, 58, 12170, 12153, 180, 267, 12167, 77, 12288, 300, 115, 12202, 151, 42, 12172, 12179, 12245, 12206, 11938, 12152, 12033, 11958, 93, 11, 11892, 12199, 422, 80, 12272, 12168, 14, 12107, 211, 202, 49, 28, 12118, 168, 70, 64, 93, 12211, 12006, 55, 12160, 12071, 156, 12278, 84, 12004, 160, 12172, 12167, 12001, 11968, 141, 11950, 147, 12238, 12147, 12165, 12137, 54, 181, 11990, 251, 64, 12125, 12017, 160, 77, 12253, 12063, 12110, 12115, 82, 48, 138, 12215, 12098, 12190, 12189, 80, 12053, 160, 244, 12210, 151, 10, 12271, 12250, 12259, 198, 121, 12184, 12142, 165, 12237, 12283, 6, 170, 201, 12147, 12229, 131, 106, 125, 6, 368, 12147, 57, 11803, 48, 202, 12268, 12161, 12103, 120, 12028, 117, 156, 12246, 12246, 12079, 12162, 12281, 12259, 27, 135, 69, 12227, 171, 161, 215, 12143, 12125, 23, 11848, 12041, 12281, 178, 12050, 12, 108, 114, 12228, 12142, 12222, 77, 12194, 12213, 172, 232, 5, 143, 317, 20, 12100, 12130, 12006, 97, 12223, 197, 61, 152, 12277, 12270, 18, 5, 158, 12140, 12113, 12233, 12288, 12008, 12211, 11975, 12230, 12287, 12163, 151, 144, 118, 279, 12144, 12170, 12113, 12037, 86, 150, 12172, 63, 12279, 12252, 12143, 12169, 91, 116, 12028, 12227, 28, 12215, 12088, 12067, 11933, 12284, 67, 12004, 209, 12217, 80, 223, 12196, 33, 12238, 9, 230, 12074, 12189, 193, 12265, 100, 23, 55, 11999, 12186, 12185, 12278, 174, 97, 12112, 12216, 169, 196, 207, 2, 215, 12106, 257, 174, 12194, 87, 178, 12191, 110, 210, 203, 12034, 17, 105, 16, 66, 139, 55, 11901, 114, 12210, 131, 12275, 6, 62, 11896, 352, 429, 63, 12154, 156, 17, 12046, 149, 5, 63, 12135, 299, 12125, 355, 126, 12148, 12029, 12251, 179, 12148, 86, 13, 107, 133, 136, 38, 268, 277, 12195, 92, 12281, 76, 84, 4, 12077, 12088, 136, 12263, 12171, 12069, 112, 12226, 109, 62, 12045, 12220, 12183, 223, 12164, 12169, 12210, 12253, 64, 12218, 246, 12150, 12250, 72, 232, 12275, 12105, 12213, 134, 34, 12201, 15, 11996, 12128, 5, 12024, 12098, 11987, 133, 121, 107, 11921, 11996, 48, 12200, 12119, 172, 240, 12245, 12111, 12245, 12213, 12222, 30, 25, 12237, 12237, 417, 12088, 12061, 12265, 12266, 216, 12193, 156, 222, 12228, 12244, 12072, 12132, 2, 87, 96, 12198, 19, 64, 194, 105, 120, 51, 73, 11918, 120, 188, 128, 47, 12010, 226, 12284, 3, 49, 12211, 12279, 245, 12115, 44, 12147, 12008, 42, 51, 12192]
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [226161519869725251356344408907678892390104083586443563386125715426949738413, 21562601821269046643200858246202301062882075022429333461940742114375696384039, 90110472414887206477556374273677958001997210199677829434480895130167869638, 21654478003405504511793214880183423382929023752422285237729687373819110359084, 124010583294412487840928470639623851466514210374141790445951906817056047265, 21265773698128382376022414973503284259154426469208937332107898559103680786159, 21152693329132454665465594805050489554057022987498904220914967648446535106661, 267122872098078746204314427438418999544365432680553123824944190772157612036, 21682749335929743170997895048871458212437570849625560537002514737635745595434, 21484861795441278719515884781875615016373675264589641157843053661627825926024, 21494022030535633365205167718007907277461970816212877879540051900491462618919, 84810874808887099016503540234665696039790220957637403019349383349827678057, 350166225851747430063282192816376389746770807469089243428549425128277475466, 650199881649548118992129068296237894454679779678092241702610418170527744121, 21488719656068291800611809833048050573318660200348545716103717126286509420403, 314829877589026152452887293853354466667021155167076575997137597709859106809, 35345487657487992676444089392285082869581089981817556183765262333748457234, 21614166714262062022744724588614947811478116106019858299625278902489629994820, 152273369432049113794598368263972752042931312526597870853463921178997960704, 21084111354649684158712973468179417192282084173425140862405837349011434766486, 21670384457790930114458052024912458205631480789721490499424656469597800837116, 379872172932402056331205938589211266183595970379019632768796329750222536804, 245593521367258131080917704623762266216657855821763979281880033371241918282, 21283440200703761945357331956834716141942358303792526371596883332396933251127, 189052986446048398455180269543195197282143096421268665349796348614205046933, 21504626235299717977365561039066129148841879524220507149017609506261092008069, 434973774590266779008708861354942402923329948686241231971615661507036065573, 21375639956089752449127111071353048175707725148465526277052153320707821547382, 21594734092587436036182371931355996474990889855110505875435994529156361957075, 21329707868621957044425685110229835681048781346542006194666559814521442598942, 226161492811046565732054082664382647078339185537063904212969076231405449060, 21541400788752694945415155366788038951273885644370092786472578455575017947183];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        bytes memory salt =
            "\x46\xb9\xdd\x2b\x0b\xa8\x8d\x13\x23\x3b\x3f\xeb\x74\x3e\xeb\x24\x3f\xcd\x52\xea\x62\xb8\x1b\x82\xb5\x0c\x27\x64\x6e\xd5\x76\x2f\xd7\x5d\xc4\xdd\xd8\xc0\xf2\x00";
        uint256 gasStart = gasleft();
        bool result = ethfalcon.verify(message, salt, s2, pkc);
        uint256 gasUsed = gasStart - gasleft();
        console.log("Verify RIP cost:       ", gasUsed);
        assertEq(true, result);
    }
}
