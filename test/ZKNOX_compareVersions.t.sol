// code generated using pythonref/generate_falcon_zknox_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_NTT.sol";
import "../src/ZKNOX_falcon_utils.sol";
import "../src/deprecated/ZKNOX_ethfalcon_old.sol";

contract ZKNOX_FalconTest is Test {
    ZKNOX_ethfalcon falcon;
    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
    uint256[512] psi_rev = [uint256(1), 10810, 7143, 4043, 10984, 722, 5736, 8155, 3542, 8785, 9744, 3621, 10643, 1212, 3195, 5860, 7468, 2639, 9664, 11340, 11726, 9314, 9283, 9545, 5728, 7698, 5023, 5828, 8961, 6512, 7311, 1351, 2319, 11119, 11334, 11499, 9088, 3014, 5086, 10963, 4846, 9542, 9154, 3712, 4805, 8736, 11227, 9995, 3091, 12208, 7969, 11289, 9326, 7393, 9238, 2366, 11112, 8034, 10654, 9521, 12149, 10436, 7678, 11563, 1260, 4388, 4632, 6534, 2426, 334, 1428, 1696, 2013, 9000, 729, 3241, 2881, 3284, 7197, 10200, 8595, 7110, 10530, 8582, 3382, 11934, 9741, 8058, 3637, 3459, 145, 6747, 9558, 8357, 7399, 6378, 9447, 480, 1022, 9, 9821, 339, 5791, 544, 10616, 4278, 6958, 7300, 8112, 8705, 1381, 9764, 11336, 8541, 827, 5767, 2476, 118, 2197, 7222, 3949, 8993, 4452, 2396, 7935, 130, 2837, 6915, 2401, 442, 7188, 11222, 390, 773, 8456, 3778, 354, 4861, 9377, 5698, 5012, 9808, 2859, 11244, 1017, 7404, 1632, 7205, 27, 9223, 8526, 10849, 1537, 242, 4714, 8146, 9611, 3704, 5019, 11744, 1002, 5011, 5088, 8005, 7313, 10682, 8509, 11414, 9852, 3646, 6022, 2987, 9723, 10102, 6250, 9867, 11224, 2143, 11885, 7644, 1168, 5277, 11082, 3248, 493, 8193, 6845, 2381, 7952, 11854, 1378, 1912, 2166, 3915, 12176, 7370, 12129, 3149, 12286, 4437, 3636, 4938, 5291, 2704, 10863, 7635, 1663, 10512, 3364, 1689, 4057, 9018, 9442, 7875, 2174, 4372, 7247, 9984, 4053, 2645, 5195, 9509, 7394, 1484, 9042, 9603, 8311, 9320, 9919, 2865, 5332, 3510, 1630, 10163, 5407, 3186, 11136, 9405, 10040, 8241, 9890, 8889, 7098, 9153, 9289, 671, 3016, 243, 6730, 420, 10111, 1544, 3985, 4905, 3531, 476, 49, 1263, 5915, 1483, 9789, 10800, 10706, 6347, 1512, 350, 10474, 5383, 5369, 10232, 9087, 4493, 9551, 6421, 6554, 2655, 9280, 1693, 174, 723, 10314, 8532, 347, 2925, 8974, 11863, 1858, 4754, 3030, 4115, 2361, 10446, 2908, 218, 3434, 8760, 3963, 576, 6142, 9842, 1954, 10238, 9407, 10484, 3991, 8320, 9522, 156, 2281, 5876, 10258, 5333, 3772, 418, 5908, 11836, 5429, 7515, 7552, 1293, 295, 6099, 5766, 652, 8273, 4077, 8527, 9370, 325, 10885, 11143, 11341, 5990, 1159, 8561, 8240, 3329, 4298, 12121, 2692, 5961, 7183, 10327, 1594, 6167, 9734, 7105, 11089, 1360, 3956, 6170, 5297, 8210, 11231, 922, 441, 1958, 4322, 1112, 2078, 4046, 709, 9139, 1319, 4240, 8719, 6224, 11454, 2459, 683, 3656, 12225, 10723, 5782, 9341, 9786, 9166, 10542, 9235, 6803, 7856, 6370, 3834, 7032, 7048, 9369, 8120, 9162, 6821, 1010, 8807, 787, 5057, 4698, 4780, 8844, 12097, 1321, 4912, 10240, 677, 6415, 6234, 8953, 1323, 9523, 12237, 3174, 1579, 11858, 9784, 5906, 3957, 9450, 151, 10162, 12231, 12048, 3532, 11286, 1956, 7280, 11404, 6281, 3477, 6608, 142, 11184, 9445, 3438, 11314, 4212, 9260, 6695, 4782, 5886, 8076, 504, 2302, 11684, 11868, 8209, 3602, 6068, 8689, 3263, 6077, 7665, 7822, 7500, 6752, 4749, 4449, 6833, 12142, 8500, 6118, 8471, 1190, 9606, 3860, 5445, 7753, 11239, 5079, 9027, 2169, 11767, 7965, 4916, 8214, 5315, 11011, 9945, 1973, 6715, 8775, 11248, 5925, 11271, 654, 3565, 1702, 1987, 6760, 5206, 3199, 12233, 6136, 6427, 6874, 8646, 4948, 6152, 400, 10561, 5339, 5446, 3710, 6093, 468, 8301, 316, 11907, 10256, 8291, 3879, 1922, 10930, 6854, 973, 11035];

    // forgefmt: disable-next-line
    uint256[512] psi_inv_rev = [uint256(1), 1479, 8246, 5146, 4134, 6553, 11567, 1305, 6429, 9094, 11077, 1646, 8668, 2545, 3504, 8747, 10938, 4978, 5777, 3328, 6461, 7266, 4591, 6561, 2744, 3006, 2975, 563, 949, 2625, 9650, 4821, 726, 4611, 1853, 140, 2768, 1635, 4255, 1177, 9923, 3051, 4896, 2963, 1000, 4320, 81, 9198, 2294, 1062, 3553, 7484, 8577, 3135, 2747, 7443, 1326, 7203, 9275, 3201, 790, 955, 1170, 9970, 5374, 9452, 12159, 4354, 9893, 7837, 3296, 8340, 5067, 10092, 12171, 9813, 6522, 11462, 3748, 953, 2525, 10908, 3584, 4177, 4989, 5331, 8011, 1673, 11745, 6498, 11950, 2468, 12280, 11267, 11809, 2842, 5911, 4890, 3932, 2731, 5542, 12144, 8830, 8652, 4231, 2548, 355, 8907, 3707, 1759, 5179, 3694, 2089, 5092, 9005, 9408, 9048, 11560, 3289, 10276, 10593, 10861, 11955, 9863, 5755, 7657, 7901, 11029, 11813, 8758, 7384, 8304, 10745, 2178, 11869, 5559, 12046, 9273, 11618, 3000, 3136, 5191, 3400, 2399, 4048, 2249, 2884, 1153, 9103, 6882, 2126, 10659, 8779, 6957, 9424, 2370, 2969, 3978, 2686, 3247, 10805, 4895, 2780, 7094, 9644, 8236, 2305, 5042, 7917, 10115, 4414, 2847, 3271, 8232, 10600, 8925, 1777, 10626, 4654, 1426, 9585, 6998, 7351, 8653, 7852, 3, 9140, 160, 4919, 113, 8374, 10123, 10377, 10911, 435, 4337, 9908, 5444, 4096, 11796, 9041, 1207, 7012, 11121, 4645, 404, 10146, 1065, 2422, 6039, 2187, 2566, 9302, 6267, 8643, 2437, 875, 3780, 1607, 4976, 4284, 7201, 7278, 11287, 545, 7270, 8585, 2678, 4143, 7575, 12047, 10752, 1440, 3763, 3066, 12262, 5084, 10657, 4885, 11272, 1045, 9430, 2481, 7277, 6591, 2912, 7428, 11935, 8511, 3833, 11516, 11899, 1067, 5101, 11847, 9888, 1254, 11316, 5435, 1359, 10367, 8410, 3998, 2033, 382, 11973, 3988, 11821, 6196, 8579, 6843, 6950, 1728, 11889, 6137, 7341, 3643, 5415, 5862, 6153, 56, 9090, 7083, 5529, 10302, 10587, 8724, 11635, 1018, 6364, 1041, 3514, 5574, 10316, 2344, 1278, 6974, 4075, 7373, 4324, 522, 10120, 3262, 7210, 1050, 4536, 6844, 8429, 2683, 11099, 3818, 6171, 3789, 147, 5456, 7840, 7540, 5537, 4789, 4467, 4624, 6212, 9026, 3600, 6221, 8687, 4080, 421, 605, 9987, 11785, 4213, 6403, 7507, 5594, 3029, 8077, 975, 8851, 2844, 1105, 12147, 5681, 8812, 6008, 885, 5009, 10333, 1003, 8757, 241, 58, 2127, 12138, 2839, 8332, 6383, 2505, 431, 10710, 9115, 52, 2766, 10966, 3336, 6055, 5874, 11612, 2049, 7377, 10968, 192, 3445, 7509, 7591, 7232, 11502, 3482, 11279, 5468, 3127, 4169, 2920, 5241, 5257, 8455, 5919, 4433, 5486, 3054, 1747, 3123, 2503, 2948, 6507, 1566, 64, 8633, 11606, 9830, 835, 6065, 3570, 8049, 10970, 3150, 11580, 8243, 10211, 11177, 7967, 10331, 11848, 11367, 1058, 4079, 6992, 6119, 8333, 10929, 1200, 5184, 2555, 6122, 10695, 1962, 5106, 6328, 9597, 168, 7991, 8960, 4049, 3728, 11130, 6299, 948, 1146, 1404, 11964, 2919, 3762, 8212, 4016, 11637, 6523, 6190, 11994, 10996, 4737, 4774, 6860, 453, 6381, 11871, 8517, 6956, 2031, 6413, 10008, 12133, 2767, 3969, 8298, 1805, 2882, 2051, 10335, 2447, 6147, 11713, 8326, 3529, 8855, 12071, 9381, 1843, 9928, 8174, 9259, 7535, 10431, 426, 3315, 9364, 11942, 3757, 1975, 11566, 12115, 10596, 3009, 9634, 5735, 5868, 2738, 7796, 3202, 2057, 6920, 6906, 1815, 11939, 10777, 5942, 1583, 1489, 2500, 10806, 6374, 11026, 12240];

    //stateful initialisation
    function setUp() public {
        bytes memory bytecode_psirev = abi.encodePacked(psi_rev);

        address a_psirev; //address of the precomputations bytecode contract
        a_psirev = address(uint160(0xcaca)); //here it is etched, use create in the future
        vm.etch(a_psirev, bytecode_psirev); //pushing psirev bytecode into contract todo : replace with create

        bytes memory bytecode_psiInvrev = abi.encodePacked(psi_inv_rev);

        address a_psiInvrev; //address of the precomputations bytecode contract
        a_psiInvrev = address(uint160(0xa5a5)); //here it is etched, use create in the future
        vm.etch(a_psiInvrev, bytecode_psiInvrev); //pushing psirev bytecode into contract todo : replace with create

        ntt.update(a_psirev, a_psiInvrev, 12289, 12265); //update ntt with outer contract

        falcon = new ZKNOX_ethfalcon();
        falcon.updateNTT(ntt);
    }

    function testVectorCompact_RIP() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint256(8494), 9875, 5391, 1879, 708, 7214, 6161, 7426, 130, 4397, 5498, 8631, 2407, 9977, 1931, 7029, 2352, 991, 9225, 9158, 8285, 955, 12093, 4942, 2664, 778, 3383, 11334, 11105, 10565, 3474, 7022, 2706, 1183, 6455, 1113, 1385, 4181, 5984, 1364, 6193, 7574, 2703, 11943, 2783, 9363, 10213, 6442, 10177, 6408, 8584, 2766, 1171, 7190, 253, 3679, 2625, 7796, 8043, 5703, 2065, 459, 1063, 5107, 475, 7421, 2950, 1363, 9991, 2222, 1222, 2148, 12181, 10486, 7239, 2220, 8612, 10147, 11233, 10557, 3816, 7607, 2043, 9737, 1487, 6402, 7156, 4425, 11155, 8706, 2669, 9984, 4688, 8809, 3126, 5346, 8576, 11683, 12012, 2541, 7468, 3700, 12043, 6636, 274, 7905, 1637, 11874, 8091, 6388, 2132, 3454, 5363, 11278, 8138, 4104, 3664, 6955, 7423, 9252, 5243, 717, 9654, 11089, 2662, 5813, 2725, 3997, 7882, 8147, 1972, 5360, 9958, 6537, 9866, 1837, 9724, 2515, 6909, 11077, 7382, 8940, 10578, 66, 991, 11249, 12078, 5661, 297, 4236, 5240, 10615, 8894, 6752, 1599, 8903, 4789, 8794, 721, 143, 708, 3893, 9853, 10975, 12240, 4519, 3983, 9215, 420, 8767, 11835, 10220, 3914, 10930, 3539, 11989, 4395, 2901, 1427, 7668, 5489, 4941, 6674, 12249, 5831, 3530, 12171, 10261, 775, 894, 11564, 5706, 3810, 11670, 9294, 9899, 5872, 9997, 9218, 8757, 7970, 11087, 3323, 4779, 9473, 12172, 9576, 2989, 1404, 11193, 376, 7670, 9520, 11007, 10252, 55, 8952, 3523, 8081, 2097, 6848, 11377, 6165, 5777, 12044, 12000, 8941, 1892, 8951, 4426, 8954, 9118, 4116, 7340, 10060, 9311, 7351, 11995, 9476, 6246, 2151, 1574, 4104, 12141, 880, 3709, 2410, 8871, 1771, 8281, 11433, 8802, 5517, 7260, 8932, 2340, 11134, 8858, 1110, 2811, 6777, 10364, 9649, 7387, 1996, 6561, 7065, 2190, 12094, 11677, 10503, 2145, 11418, 10041, 9467, 109, 5395, 5299, 7200, 11203, 3966, 6117, 1065, 3458, 5521, 12182, 6969, 1134, 7108, 648, 285, 8703, 100, 12113, 6653, 7377, 6804, 1717, 9467, 10055, 4009, 3545, 7482, 28, 4253, 47, 12043, 7057, 1286, 10754, 3347, 3280, 3738, 3323, 7715, 6500, 350, 12245, 11148, 1705, 6450, 336, 2873, 176, 9059, 2491, 7546, 2877, 7417, 9768, 2526, 2893, 551, 9462, 1754, 3452, 7819, 10010, 844, 4087, 8473, 5019, 9155, 12253, 8338, 10746, 6837, 9485, 7469, 4277, 8497, 10631, 2810, 5104, 5895, 7050, 298, 1144, 3489, 7210, 11509, 4913, 7844, 1396, 9705, 11371, 1646, 3089, 7918, 12187, 6710, 106, 6810, 3783, 9423, 180, 3100, 228, 6112, 9775, 3407, 10474, 3340, 232, 11654, 454, 2551, 6891, 10879, 2473, 6594, 9791, 6870, 5661, 5877, 8893, 3075, 4752, 1135, 3859, 2495, 5101, 1384, 5825, 5539, 1734, 4694, 7444, 8731, 4653, 7432, 7238, 9267, 1719, 9790, 6698, 6049, 2948, 4962, 8614, 2381, 2866, 6384, 11786, 775, 4155, 7072, 9670, 2011, 4684, 6722, 1077, 7784, 7614, 217, 90, 9505, 4379, 1799, 1159, 6056, 11386, 5041, 3383, 102, 12112, 9520, 8228, 9636, 668, 210, 4688, 3381, 2281, 2261, 11425, 7820, 2252, 9565, 7195, 8650, 7037, 11164, 9071, 1220, 1974, 6262, 8288, 4926, 1069, 206, 7288, 4139, 4020, 728, 10582, 10621, 4568, 5054, 9984, 6837, 236, 7164, 9106, 9007, 3765, 700, 4173, 1524, 11782, 6690, 9860, 2926, 538, 11340, 6889, 10459, 7255, 7705, 6244, 10579, 7541, 10909, 11397, 9092, 115, 2610, 5294, 10509, 3454, 4985, 2496 ];

        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }

        uint256[] memory ntt_pk = ntt.ZKNOX_NTTFW(pk, ntt.o_psirev());

        uint256[] memory tmp_pkc = _ZKNOX_NTT_Compact(ntt_pk);

        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory s2 = [uint256(12283), 12027, 24, 37, 12231, 12278, 12178, 254, 12158, 12196, 12133, 12161, 12236, 12100, 12277, 164, 109, 12181, 12230, 149, 12042, 11905, 12126, 12019, 515, 129, 296, 12254, 12225, 119, 12080, 13, 12236, 53, 12140, 293, 12253, 12283, 114, 236, 12097, 119, 12193, 11905, 12112, 161, 397, 281, 22, 12115, 52, 12043, 39, 27, 11960, 12118, 28, 12039, 87, 12177, 51, 12173, 205, 4, 37, 136, 12238, 67, 12239, 11846, 12177, 167, 198, 12109, 12173, 167, 12147, 12233, 10, 12062, 12154, 90, 10, 275, 44, 12273, 27, 23, 12164, 12184, 12273, 12277, 12170, 12128, 24, 63, 12119, 11907, 12028, 12146, 75, 12275, 247, 12148, 141, 12254, 12134, 187, 3, 12125, 12162, 50, 12225, 202, 12059, 115, 48, 202, 12254, 12169, 63, 160, 12162, 48, 12222, 12175, 12274, 186, 323, 12273, 11963, 333, 234, 102, 70, 422, 40, 12143, 56, 12184, 146, 54, 11959, 12170, 12132, 12215, 12201, 237, 12249, 234, 48, 168, 12279, 11931, 12010, 12079, 12046, 12205, 12143, 3, 36, 52, 294, 4, 12049, 12255, 86, 12084, 67, 60, 101, 12168, 217, 12069, 101, 12130, 177, 12191, 40, 164, 158, 12193, 12081, 12022, 12198, 108, 77, 78, 12201, 33, 237, 12176, 12016, 12275, 12178, 37, 12205, 12255, 12141, 42, 12238, 35, 12091, 12275, 139, 197, 12153, 89, 60, 12173, 20, 12182, 12254, 156, 12054, 117, 12164, 12179, 12136, 207, 13, 12189, 12255, 47, 133, 12066, 327, 12104, 40, 33, 12136, 12182, 12208, 154, 160, 12120, 269, 28, 281, 200, 12132, 12224, 136, 12265, 12068, 171, 12245, 12177, 12177, 25, 12280, 101, 149, 332, 74, 12255, 43, 85, 58, 194, 106, 12026, 49, 34, 374, 231, 12276, 13, 192, 91, 12004, 46, 186, 12279, 369, 92, 238, 12004, 12288, 12187, 12114, 245, 291, 228, 89, 12255, 12050, 12174, 78, 12148, 205, 87, 344, 140, 12153, 134, 175, 12270, 120, 12268, 12099, 12088, 12224, 12173, 12164, 11868, 76, 12002, 12084, 12102, 406, 110, 70, 104, 69, 315, 148, 110, 274, 12116, 222, 11876, 12246, 273, 47, 54, 12267, 180, 12064, 139, 12134, 12170, 206, 12135, 12270, 85, 12160, 58, 12265, 12013, 280, 12226, 12207, 12264, 12266, 15, 12149, 158, 386, 97, 11940, 12259, 294, 168, 146, 11963, 242, 91, 11996, 168, 11970, 12120, 12099, 12263, 184, 11983, 56, 12161, 36, 12166, 12246, 12014, 12225, 12048, 20, 12239, 202, 12198, 117, 351, 12115, 12090, 12191, 12280, 12203, 175, 105, 12168, 12115, 173, 41, 12084, 193, 258, 12205, 452, 108, 12224, 12287, 12250, 167, 64, 235, 185, 88, 12259, 155, 11988, 40, 12177, 12170, 12186, 149, 45, 12109, 229, 189, 235, 177, 12140, 12118, 21, 12230, 12186, 1, 234, 38, 189, 12277, 12274, 12240, 42, 12207, 12076, 12051, 157, 124, 12253, 12257, 130, 11804, 12246, 12263, 136, 12184, 94, 104, 22, 124, 12267, 12234, 29, 204, 12120, 12144, 12234, 12273, 221, 12273, 181, 71, 12161, 72, 98, 12187, 12183, 286, 12011, 12181, 34, 12244, 12112, 206, 62, 12246, 46, 12075, 69, 12028, 12267, 12247, 11957, 12061, 12157, 12069, 12032, 12041, 12258, 12013, 39, 244, 12261, 57, 91, 117, 12270, 12210, 12164, 12283, 218, 12271, 12228, 214, 12237, 12248, 12280, 395, 12127, 12, 140, 37, 40];

        uint256[] memory tmp_s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            tmp_s2[i] = s2[i];
        }

        uint256[] memory tmp_s2c = _ZKNOX_NTT_Compact(tmp_s2);

        ZKNOX_ethfalcon.CompactSignature memory sig;

        sig.s2 = new uint256[](32);

        for (uint256 i = 0; i < 32; i++) {
            sig.s2[i] = tmp_s2c[i];
        }
        // message
        bytes memory message = "My name is Renaud";
        sig.salt =
            "\x35\x00\x31\x8f\x75\xad\x20\xf0\xaa\x20\x62\xba\x1c\x34\x8a\xfe\xaa\x49\x23\x87\xa4\x63\xeb\x8c\x28\xaf\x77\x9d\x6a\x3e\xa6\x96\xeb\xb9\x66\x0c\xcf\xf5\x06\x2d";

        uint256 gasStart = gasleft();
        bool result = falcon.verify(message, sig, tmp_pkc);
        uint256 gasUsed = gasStart - gasleft();

        console.log("Falcon compact gas cost:", gasUsed);

        assertEq(true, result);
    }

    function testVectorCompact_tetration() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint256(8494), 9875, 5391, 1879, 708, 7214, 6161, 7426, 130, 4397, 5498, 8631, 2407, 9977, 1931, 7029, 2352, 991, 9225, 9158, 8285, 955, 12093, 4942, 2664, 778, 3383, 11334, 11105, 10565, 3474, 7022, 2706, 1183, 6455, 1113, 1385, 4181, 5984, 1364, 6193, 7574, 2703, 11943, 2783, 9363, 10213, 6442, 10177, 6408, 8584, 2766, 1171, 7190, 253, 3679, 2625, 7796, 8043, 5703, 2065, 459, 1063, 5107, 475, 7421, 2950, 1363, 9991, 2222, 1222, 2148, 12181, 10486, 7239, 2220, 8612, 10147, 11233, 10557, 3816, 7607, 2043, 9737, 1487, 6402, 7156, 4425, 11155, 8706, 2669, 9984, 4688, 8809, 3126, 5346, 8576, 11683, 12012, 2541, 7468, 3700, 12043, 6636, 274, 7905, 1637, 11874, 8091, 6388, 2132, 3454, 5363, 11278, 8138, 4104, 3664, 6955, 7423, 9252, 5243, 717, 9654, 11089, 2662, 5813, 2725, 3997, 7882, 8147, 1972, 5360, 9958, 6537, 9866, 1837, 9724, 2515, 6909, 11077, 7382, 8940, 10578, 66, 991, 11249, 12078, 5661, 297, 4236, 5240, 10615, 8894, 6752, 1599, 8903, 4789, 8794, 721, 143, 708, 3893, 9853, 10975, 12240, 4519, 3983, 9215, 420, 8767, 11835, 10220, 3914, 10930, 3539, 11989, 4395, 2901, 1427, 7668, 5489, 4941, 6674, 12249, 5831, 3530, 12171, 10261, 775, 894, 11564, 5706, 3810, 11670, 9294, 9899, 5872, 9997, 9218, 8757, 7970, 11087, 3323, 4779, 9473, 12172, 9576, 2989, 1404, 11193, 376, 7670, 9520, 11007, 10252, 55, 8952, 3523, 8081, 2097, 6848, 11377, 6165, 5777, 12044, 12000, 8941, 1892, 8951, 4426, 8954, 9118, 4116, 7340, 10060, 9311, 7351, 11995, 9476, 6246, 2151, 1574, 4104, 12141, 880, 3709, 2410, 8871, 1771, 8281, 11433, 8802, 5517, 7260, 8932, 2340, 11134, 8858, 1110, 2811, 6777, 10364, 9649, 7387, 1996, 6561, 7065, 2190, 12094, 11677, 10503, 2145, 11418, 10041, 9467, 109, 5395, 5299, 7200, 11203, 3966, 6117, 1065, 3458, 5521, 12182, 6969, 1134, 7108, 648, 285, 8703, 100, 12113, 6653, 7377, 6804, 1717, 9467, 10055, 4009, 3545, 7482, 28, 4253, 47, 12043, 7057, 1286, 10754, 3347, 3280, 3738, 3323, 7715, 6500, 350, 12245, 11148, 1705, 6450, 336, 2873, 176, 9059, 2491, 7546, 2877, 7417, 9768, 2526, 2893, 551, 9462, 1754, 3452, 7819, 10010, 844, 4087, 8473, 5019, 9155, 12253, 8338, 10746, 6837, 9485, 7469, 4277, 8497, 10631, 2810, 5104, 5895, 7050, 298, 1144, 3489, 7210, 11509, 4913, 7844, 1396, 9705, 11371, 1646, 3089, 7918, 12187, 6710, 106, 6810, 3783, 9423, 180, 3100, 228, 6112, 9775, 3407, 10474, 3340, 232, 11654, 454, 2551, 6891, 10879, 2473, 6594, 9791, 6870, 5661, 5877, 8893, 3075, 4752, 1135, 3859, 2495, 5101, 1384, 5825, 5539, 1734, 4694, 7444, 8731, 4653, 7432, 7238, 9267, 1719, 9790, 6698, 6049, 2948, 4962, 8614, 2381, 2866, 6384, 11786, 775, 4155, 7072, 9670, 2011, 4684, 6722, 1077, 7784, 7614, 217, 90, 9505, 4379, 1799, 1159, 6056, 11386, 5041, 3383, 102, 12112, 9520, 8228, 9636, 668, 210, 4688, 3381, 2281, 2261, 11425, 7820, 2252, 9565, 7195, 8650, 7037, 11164, 9071, 1220, 1974, 6262, 8288, 4926, 1069, 206, 7288, 4139, 4020, 728, 10582, 10621, 4568, 5054, 9984, 6837, 236, 7164, 9106, 9007, 3765, 700, 4173, 1524, 11782, 6690, 9860, 2926, 538, 11340, 6889, 10459, 7255, 7705, 6244, 10579, 7541, 10909, 11397, 9092, 115, 2610, 5294, 10509, 3454, 4985, 2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }

        uint256[] memory ntt_pk = ntt.ZKNOX_NTTFW(pk, ntt.o_psirev());

        uint256[] memory tmp_pkc = _ZKNOX_NTT_Compact(ntt_pk);
        // forgefmt: disable-next-line
        uint[512] memory s2 = [uint256(12189), 253, 12275, 406, 12187, 59, 285, 152, 12257, 165, 12227, 26, 8, 85, 12137, 12164, 122, 232, 12110, 118, 149, 12008, 12286, 12272, 64, 199, 76, 12237, 12280, 335, 129, 24, 12251, 137, 12251, 38, 250, 12245, 12176, 12048, 109, 35, 173, 404, 12127, 12088, 3, 206, 325, 222, 299, 147, 190, 182, 152, 12049, 12264, 46, 173, 112, 168, 114, 12180, 12282, 114, 12092, 89, 12215, 12173, 12160, 186, 21, 12131, 84, 12189, 12249, 12207, 39, 63, 172, 93, 12194, 19, 12252, 12160, 15, 12140, 4, 396, 12105, 12219, 153, 12237, 12043, 12228, 12245, 269, 12034, 92, 353, 12256, 12196, 38, 130, 12240, 12051, 12154, 12255, 202, 12160, 12263, 12251, 123, 41, 12033, 12079, 69, 12263, 17, 34, 12278, 12231, 12265, 12153, 106, 67, 17, 136, 12256, 15, 12204, 12185, 12087, 276, 12112, 12210, 61, 23, 12152, 12136, 97, 12272, 6, 12126, 156, 12127, 12211, 12091, 104, 12034, 12254, 67, 12022, 12260, 12141, 12244, 276, 66, 12158, 263, 12158, 11982, 26, 112, 154, 12288, 64, 12021, 128, 44, 12257, 128, 12205, 12288, 12277, 11956, 11745, 11940, 12126, 12240, 12122, 12181, 12170, 12064, 279, 12092, 12194, 126, 108, 141, 395, 4, 12036, 12257, 12203, 95, 12089, 12252, 120, 12214, 12244, 12272, 130, 12230, 12123, 12197, 12122, 60, 12245, 213, 173, 47, 239, 145, 12090, 12128, 12157, 12017, 307, 75, 120, 12205, 12187, 153, 12190, 12180, 22, 76, 12007, 121, 12228, 94, 20, 12148, 79, 51, 12019, 83, 182, 427, 12203, 63, 40, 216, 12180, 12093, 12106, 88, 143, 208, 160, 28, 273, 193, 12205, 89, 196, 12167, 278, 12243, 12175, 12249, 12168, 11958, 12143, 12165, 12106, 12272, 89, 336, 18, 58, 12277, 147, 79, 149, 12266, 81, 12219, 21, 12202, 12284, 12179, 12037, 12106, 339, 11895, 107, 12112, 12059, 2, 12265, 208, 355, 361, 12047, 31, 304, 114, 12217, 12116, 80, 202, 12055, 12188, 52, 125, 12258, 12071, 12237, 12081, 12041, 12165, 180, 12128, 85, 327, 12018, 327, 44, 12246, 51, 135, 33, 12255, 24, 5, 67, 12089, 12219, 12097, 12277, 12181, 12106, 92, 73, 12272, 12195, 100, 12033, 12281, 187, 185, 31, 11963, 12281, 71, 84, 416, 12186, 12202, 12157, 12178, 141, 13, 143, 95, 12068, 12086, 234, 12209, 40, 12261, 12074, 12132, 323, 17, 131, 60, 12074, 12091, 12060, 133, 43, 12119, 12180, 83, 12195, 12263, 11902, 12192, 12213, 38, 12278, 508, 12148, 12217, 62, 12260, 12171, 162, 44, 11974, 12133, 83, 12165, 12225, 50, 12237, 49, 12221, 149, 12144, 87, 39, 35, 35, 12279, 12164, 149, 182, 130, 12258, 167, 11981, 12193, 12058, 12081, 95, 318, 170, 12220, 102, 146, 208, 275, 83, 237, 82, 12247, 12182, 12233, 60, 12252, 304, 12033, 12221, 167, 121, 12152, 82, 11927, 12099, 12151, 12206, 89, 12209, 183, 30, 12283, 78, 12239, 12111, 12224, 232, 12272, 12093, 111, 152, 105, 109, 14, 12248, 12035, 1, 12003, 165, 225, 12129, 197, 70, 99, 293, 11985, 26, 12148, 12183, 12076, 12134, 129, 12191, 12279, 12024, 12006, 17, 12181, 215, 518, 128, 12256, 12100, 26, 276, 12185, 15, 41, 12280, 12128, 102, 269, 231, 12037, 12094, 96, 134, 12027, 12125, 12215, 310, 12065, 12170, 12034];
        uint256[] memory tmp_s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            tmp_s2[i] = s2[i];
        }

        uint256[] memory tmp_s2c = _ZKNOX_NTT_Compact(tmp_s2);

        ZKNOX_ethfalcon.CompactSignature memory sig;

        sig.s2 = new uint256[](32);

        for (uint256 i = 0; i < 32; i++) {
            sig.s2[i] = tmp_s2c[i];
        }
        // message
        bytes memory message = "My name is Renaud";
        sig.salt =
            "\x35\x00\x31\x8f\x75\xad\x20\xf0\xaa\x20\x62\xba\x1c\x34\x8a\xfe\xaa\x49\x23\x87\xa4\x63\xeb\x8c\x28\xaf\x77\x9d\x6a\x3e\xa6\x96\xeb\xb9\x66\x0c\xcf\xf5\x06\x2d";
        uint256 gasStart = gasleft();
        bool result = falcon.verifyTetration(message, sig, tmp_pkc);
        uint256 gasUsed = gasStart - gasleft();

        console.log("Falcon tetration compact gas cost:", gasUsed);
        assertEq(true, result);
    }
}
