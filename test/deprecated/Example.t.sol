// code generated using pythonref/generate_falcon_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../../src/ZKNOX_NTT.sol";
import "../../src/deprecated/ZKNOX_falcon.sol";

contract ExampleTest is Test {
    ZKNOX_falcon falcon;
    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
    uint256[512] psi_rev = [uint256(1), 10810, 7143, 4043, 10984, 722, 5736, 8155, 3542, 8785, 9744, 3621, 10643, 1212, 3195, 5860, 7468, 2639, 9664, 11340, 11726, 9314, 9283, 9545, 5728, 7698, 5023, 5828, 8961, 6512, 7311, 1351, 2319, 11119, 11334, 11499, 9088, 3014, 5086, 10963, 4846, 9542, 9154, 3712, 4805, 8736, 11227, 9995, 3091, 12208, 7969, 11289, 9326, 7393, 9238, 2366, 11112, 8034, 10654, 9521, 12149, 10436, 7678, 11563, 1260, 4388, 4632, 6534, 2426, 334, 1428, 1696, 2013, 9000, 729, 3241, 2881, 3284, 7197, 10200, 8595, 7110, 10530, 8582, 3382, 11934, 9741, 8058, 3637, 3459, 145, 6747, 9558, 8357, 7399, 6378, 9447, 480, 1022, 9, 9821, 339, 5791, 544, 10616, 4278, 6958, 7300, 8112, 8705, 1381, 9764, 11336, 8541, 827, 5767, 2476, 118, 2197, 7222, 3949, 8993, 4452, 2396, 7935, 130, 2837, 6915, 2401, 442, 7188, 11222, 390, 773, 8456, 3778, 354, 4861, 9377, 5698, 5012, 9808, 2859, 11244, 1017, 7404, 1632, 7205, 27, 9223, 8526, 10849, 1537, 242, 4714, 8146, 9611, 3704, 5019, 11744, 1002, 5011, 5088, 8005, 7313, 10682, 8509, 11414, 9852, 3646, 6022, 2987, 9723, 10102, 6250, 9867, 11224, 2143, 11885, 7644, 1168, 5277, 11082, 3248, 493, 8193, 6845, 2381, 7952, 11854, 1378, 1912, 2166, 3915, 12176, 7370, 12129, 3149, 12286, 4437, 3636, 4938, 5291, 2704, 10863, 7635, 1663, 10512, 3364, 1689, 4057, 9018, 9442, 7875, 2174, 4372, 7247, 9984, 4053, 2645, 5195, 9509, 7394, 1484, 9042, 9603, 8311, 9320, 9919, 2865, 5332, 3510, 1630, 10163, 5407, 3186, 11136, 9405, 10040, 8241, 9890, 8889, 7098, 9153, 9289, 671, 3016, 243, 6730, 420, 10111, 1544, 3985, 4905, 3531, 476, 49, 1263, 5915, 1483, 9789, 10800, 10706, 6347, 1512, 350, 10474, 5383, 5369, 10232, 9087, 4493, 9551, 6421, 6554, 2655, 9280, 1693, 174, 723, 10314, 8532, 347, 2925, 8974, 11863, 1858, 4754, 3030, 4115, 2361, 10446, 2908, 218, 3434, 8760, 3963, 576, 6142, 9842, 1954, 10238, 9407, 10484, 3991, 8320, 9522, 156, 2281, 5876, 10258, 5333, 3772, 418, 5908, 11836, 5429, 7515, 7552, 1293, 295, 6099, 5766, 652, 8273, 4077, 8527, 9370, 325, 10885, 11143, 11341, 5990, 1159, 8561, 8240, 3329, 4298, 12121, 2692, 5961, 7183, 10327, 1594, 6167, 9734, 7105, 11089, 1360, 3956, 6170, 5297, 8210, 11231, 922, 441, 1958, 4322, 1112, 2078, 4046, 709, 9139, 1319, 4240, 8719, 6224, 11454, 2459, 683, 3656, 12225, 10723, 5782, 9341, 9786, 9166, 10542, 9235, 6803, 7856, 6370, 3834, 7032, 7048, 9369, 8120, 9162, 6821, 1010, 8807, 787, 5057, 4698, 4780, 8844, 12097, 1321, 4912, 10240, 677, 6415, 6234, 8953, 1323, 9523, 12237, 3174, 1579, 11858, 9784, 5906, 3957, 9450, 151, 10162, 12231, 12048, 3532, 11286, 1956, 7280, 11404, 6281, 3477, 6608, 142, 11184, 9445, 3438, 11314, 4212, 9260, 6695, 4782, 5886, 8076, 504, 2302, 11684, 11868, 8209, 3602, 6068, 8689, 3263, 6077, 7665, 7822, 7500, 6752, 4749, 4449, 6833, 12142, 8500, 6118, 8471, 1190, 9606, 3860, 5445, 7753, 11239, 5079, 9027, 2169, 11767, 7965, 4916, 8214, 5315, 11011, 9945, 1973, 6715, 8775, 11248, 5925, 11271, 654, 3565, 1702, 1987, 6760, 5206, 3199, 12233, 6136, 6427, 6874, 8646, 4948, 6152, 400, 10561, 5339, 5446, 3710, 6093, 468, 8301, 316, 11907, 10256, 8291, 3879, 1922, 10930, 6854, 973, 11035];

    // forgefmt: disable-next-line
    uint256[512] psi_inv_rev = [uint256(1), 1479, 8246, 5146, 4134, 6553, 11567, 1305, 6429, 9094, 11077, 1646, 8668, 2545, 3504, 8747, 10938, 4978, 5777, 3328, 6461, 7266, 4591, 6561, 2744, 3006, 2975, 563, 949, 2625, 9650, 4821, 726, 4611, 1853, 140, 2768, 1635, 4255, 1177, 9923, 3051, 4896, 2963, 1000, 4320, 81, 9198, 2294, 1062, 3553, 7484, 8577, 3135, 2747, 7443, 1326, 7203, 9275, 3201, 790, 955, 1170, 9970, 5374, 9452, 12159, 4354, 9893, 7837, 3296, 8340, 5067, 10092, 12171, 9813, 6522, 11462, 3748, 953, 2525, 10908, 3584, 4177, 4989, 5331, 8011, 1673, 11745, 6498, 11950, 2468, 12280, 11267, 11809, 2842, 5911, 4890, 3932, 2731, 5542, 12144, 8830, 8652, 4231, 2548, 355, 8907, 3707, 1759, 5179, 3694, 2089, 5092, 9005, 9408, 9048, 11560, 3289, 10276, 10593, 10861, 11955, 9863, 5755, 7657, 7901, 11029, 11813, 8758, 7384, 8304, 10745, 2178, 11869, 5559, 12046, 9273, 11618, 3000, 3136, 5191, 3400, 2399, 4048, 2249, 2884, 1153, 9103, 6882, 2126, 10659, 8779, 6957, 9424, 2370, 2969, 3978, 2686, 3247, 10805, 4895, 2780, 7094, 9644, 8236, 2305, 5042, 7917, 10115, 4414, 2847, 3271, 8232, 10600, 8925, 1777, 10626, 4654, 1426, 9585, 6998, 7351, 8653, 7852, 3, 9140, 160, 4919, 113, 8374, 10123, 10377, 10911, 435, 4337, 9908, 5444, 4096, 11796, 9041, 1207, 7012, 11121, 4645, 404, 10146, 1065, 2422, 6039, 2187, 2566, 9302, 6267, 8643, 2437, 875, 3780, 1607, 4976, 4284, 7201, 7278, 11287, 545, 7270, 8585, 2678, 4143, 7575, 12047, 10752, 1440, 3763, 3066, 12262, 5084, 10657, 4885, 11272, 1045, 9430, 2481, 7277, 6591, 2912, 7428, 11935, 8511, 3833, 11516, 11899, 1067, 5101, 11847, 9888, 1254, 11316, 5435, 1359, 10367, 8410, 3998, 2033, 382, 11973, 3988, 11821, 6196, 8579, 6843, 6950, 1728, 11889, 6137, 7341, 3643, 5415, 5862, 6153, 56, 9090, 7083, 5529, 10302, 10587, 8724, 11635, 1018, 6364, 1041, 3514, 5574, 10316, 2344, 1278, 6974, 4075, 7373, 4324, 522, 10120, 3262, 7210, 1050, 4536, 6844, 8429, 2683, 11099, 3818, 6171, 3789, 147, 5456, 7840, 7540, 5537, 4789, 4467, 4624, 6212, 9026, 3600, 6221, 8687, 4080, 421, 605, 9987, 11785, 4213, 6403, 7507, 5594, 3029, 8077, 975, 8851, 2844, 1105, 12147, 5681, 8812, 6008, 885, 5009, 10333, 1003, 8757, 241, 58, 2127, 12138, 2839, 8332, 6383, 2505, 431, 10710, 9115, 52, 2766, 10966, 3336, 6055, 5874, 11612, 2049, 7377, 10968, 192, 3445, 7509, 7591, 7232, 11502, 3482, 11279, 5468, 3127, 4169, 2920, 5241, 5257, 8455, 5919, 4433, 5486, 3054, 1747, 3123, 2503, 2948, 6507, 1566, 64, 8633, 11606, 9830, 835, 6065, 3570, 8049, 10970, 3150, 11580, 8243, 10211, 11177, 7967, 10331, 11848, 11367, 1058, 4079, 6992, 6119, 8333, 10929, 1200, 5184, 2555, 6122, 10695, 1962, 5106, 6328, 9597, 168, 7991, 8960, 4049, 3728, 11130, 6299, 948, 1146, 1404, 11964, 2919, 3762, 8212, 4016, 11637, 6523, 6190, 11994, 10996, 4737, 4774, 6860, 453, 6381, 11871, 8517, 6956, 2031, 6413, 10008, 12133, 2767, 3969, 8298, 1805, 2882, 2051, 10335, 2447, 6147, 11713, 8326, 3529, 8855, 12071, 9381, 1843, 9928, 8174, 9259, 7535, 10431, 426, 3315, 9364, 11942, 3757, 1975, 11566, 12115, 10596, 3009, 9634, 5735, 5868, 2738, 7796, 3202, 2057, 6920, 6906, 1815, 11939, 10777, 5942, 1583, 1489, 2500, 10806, 6374, 11026, 12240];

    //stateful initialisation
    function setUp() public {
        bytes memory bytecode_psirev = abi.encodePacked(psi_rev);

        address a_psirev; //address of the precomputations bytecode contract
        a_psirev = address(uint160(0xcaca)); //here it is etched, use create in the future
        vm.etch(a_psirev, bytecode_psirev); //pushing psirev bytecode into contract todo : replace with create

        bytes memory bytecode_psiInvrev = abi.encodePacked(psi_inv_rev);

        address a_psiInvrev; //address of the precomputations bytecode contract
        a_psiInvrev = address(uint160(0xa5a5)); //here it is etched, use create in the future
        vm.etch(a_psiInvrev, bytecode_psiInvrev); //pushing psirev bytecode into contract todo : replace with create

        ntt.update(a_psirev, a_psiInvrev, 12289, 12265); //update ntt with outer contract

        falcon = new ZKNOX_falcon(ntt);
    }

    function test_ExampleVerification() public view {
        //
        // Verify the signature generated using python
        //
        // tmp_pk, s2 and salt are computed using Python
        //
        // Solidity public key:
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(7558), 462,7796,8887,3563,9934,5945,7574,1475,6477,8554,8550,742,11465,5529,6636,3634,4583,4564,5008,429,6295,11401,10190,12003,8391,10652,11155,8189,4982,3540,8875,7413,1184,2771,3870,6723,5521,3798,6503,883,10697,3125,11267,5609,10219,3567,6746,2503,1243,6605,2143,8791,10294,8221,3006,9030,10338,8281,11199,1509,411,1764,2443,10629,7499,3095,5843,9793,1649,11516,2086,6295,10722,4500,10607,6474,12240,4633,7931,10363,11461,11813,8323,7023,2080,6077,7377,1108,12095,8472,5736,64,11691,427,5949,6818,1493,11897,5879,4091,10486,6991,5212,2489,5311,4789,3336,11064,1881,8143,9472,10708,6158,11751,1811,8864,10343,3526,2704,1943,1653,4702,12066,7597,5638,7668,7319,10867,10470,8122,6765,10587,9113,4554,9143,11156,7159,11660,10238,4340,2151,2641,11875,5557,9704,1030,7156,7036,7414,10547,5199,11486,1259,10270,3187,3949,4451,3938,4138,8448,6020,10294,2673,7541,922,1720,8726,3556,6213,11111,72,9807,7654,447,6991,12238,10904,2158,3498,6381,1643,6502,1845,8416,1464,1256,8223,5977,5548,310,11709,11967,4257,734,5248,4977,5175,10280,6096,6443,8616,10818,5039,7108,535,1315,6896,2769,11351,9879,1628,8185,2020,9867,6290,843,3090,9289,3065,11672,7719,5184,7322,2221,4133,8787,6681,1286,5853,795,4016,10308,572,3006,3630,9094,10126,4442,3114,6924,3196,10604,8636,7798,469,7543,10150,400,11855,11468,4083,11594,12027,4351,6309,5839,7641,8839,8197,6311,3063,8970,4505,460,6696,10018,168,2518,12163,7382,3167,2350,10636,11595,6563,3972,5694,9465,3347,768,9478,6976,2200,11306,2431,1016,3624,7062,11810,10640,11787,10943,5989,3000,5267,11008,6320,794,1531,4774,7023,4553,1606,7220,9645,5764,3702,4177,5786,2068,4423,141,6459,1457,1466,907,10305,6310,12209,6997,6946,10971,8278,10321,6765,9042,447,10818,7172,11704,7850,3595,3415,6023,2000,3315,9532,7540,7277,6003,6824,5687,247,303,2426,7432,8449,3189,273,1913,2635,540,972,9895,1048,11879,7098,11735,11818,10808,5550,4001,7117,11227,1380,1401,2439,4325,3542,10248,1389,3221,1830,9595,10894,2851,5580,5904,6198,10383,7311,6182,8620,8656,6013,1180,9634,12002,9933,1095,4316,9515,3694,9290,4252,10764,12151,2508,4551,10576,10310,1721,8746,9419,8448,1163,559,6775,2553,770,7180,4087,10082,2049,11149,363,11377,5951,9288,7293,11303,11138,1468,2354,556,9334,10709,7245,7524,4657,8951,9175,1166,11231,6104,2281,5636,9281,8099,2023,9954,5389,2354,9806,9181,10526,10205,2009,7828,6098,2707,200,9784,8282,2608,8812,11089,9223,1415,4242,8590,4384,3455,11786,8881,9702,8275,3707,11502,5752,163,11550,5005,526,11527,4525,6914,3325,11755,7217,1161,4622,1352,188,3439,6916,10640,4437,7260,10089,2451,6272,10578,577,9793,10605,7750,5380,9160,3828,9984,6416,1335,8342,7927,7421,4859,2537,5852,8872,1073];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }

        // Solidity raw signature:
        // s2
        // forgefmt: disable-next-line
        uint[512] memory s2 = [uint(12109), 141, 12150, 12168, 89, 12213, 12150, 28, 109, 99, 12087, 29, 153, 247, 12204, 172, 12206, 23, 45, 12254, 123, 142, 12228, 12043, 94, 12215, 1, 0, 12029, 408, 11899, 12134, 11997, 12146, 47, 99, 28, 10, 12113, 150, 11, 12051, 106, 153, 12226, 12201, 12084, 149, 12256, 12226, 136, 12084, 12138, 12183, 12276, 12245, 172, 1, 13, 275, 12207, 12023, 12119, 12268, 12269, 43, 12092, 12144, 12114, 54, 12285, 12038, 12129, 12190, 111, 54, 11976, 72, 191, 151, 12140, 11910, 263, 12109, 12125, 11902, 12288, 132, 12257, 12273, 77, 12266, 57, 12276, 153, 24, 269, 37, 69, 191, 12060, 181, 12162, 12145, 251, 12075, 12193, 12232, 112, 12138, 236, 12128, 11946, 12, 12254, 78, 45, 12212, 57, 12110, 12071, 12266, 12282, 35, 12120, 12089, 3, 52, 12273, 50, 11920, 228, 12165, 304, 12145, 12, 67, 88, 108, 114, 14, 12206, 12140, 15, 462, 183, 12093, 368, 12164, 12022, 56, 268, 12190, 12209, 12228, 12227, 353, 12020, 0, 143, 12043, 63, 12286, 9, 11973, 12144, 38, 17, 12113, 12070, 11915, 12033, 98, 176, 12267, 12015, 11941, 12233, 12094, 24, 12122, 12186, 12195, 230, 12070, 146, 12223, 11, 12252, 81, 12216, 117, 177, 11991, 12270, 64, 12103, 11994, 12151, 12090, 12242, 168, 34, 77, 12068, 76, 8, 12176, 11987, 12245, 12241, 163, 65, 12101, 107, 12228, 12136, 264, 12070, 357, 23, 46, 57, 20, 12223, 12272, 16, 151, 84, 12070, 221, 105, 12113, 11924, 12227, 12213, 12080, 23, 12223, 12269, 12287, 269, 72, 438, 12020, 12086, 71, 254, 12121, 4, 254, 144, 12256, 12064, 12091, 24, 198, 9, 98, 12064, 12184, 82, 12223, 55, 12133, 12254, 47, 12166, 12121, 12152, 12027, 42, 21, 12100, 12257, 19, 12192, 206, 12199, 12154, 24, 12207, 11970, 202, 300, 58, 11896, 12013, 12236, 49, 342, 12191, 12032, 55, 12200, 201, 12211, 12263, 22, 11998, 12281, 12160, 12259, 12203, 80, 90, 72, 12211, 336, 76, 211, 41, 12234, 12216, 150, 54, 19, 102, 12054, 334, 12208, 241, 28, 12223, 12145, 12124, 0, 12206, 179, 1, 12178, 223, 12100, 34, 221, 12175, 12212, 34, 12131, 166, 4, 274, 12206, 12143, 12285, 47, 25, 12240, 361, 187, 12228, 56, 12271, 12204, 12193, 153, 12226, 12262, 213, 112, 126, 61, 12091, 152, 12190, 12219, 12202, 447, 12269, 12087, 260, 12150, 11909, 12226, 12256, 314, 92, 207, 11, 12278, 517, 12277, 87, 130, 61, 93, 125, 11884, 12227, 89, 12206, 116, 64, 221, 12168, 68, 266, 128, 12138, 263, 12274, 2, 12165, 62, 130, 18, 154, 12132, 50, 12167, 12035, 12069, 214, 12076, 320, 12175, 127, 12055, 208, 12133, 12046, 12207, 0, 12278, 12081, 12148, 132, 12238, 12119, 61, 139, 12286, 12240, 192, 12103, 27, 77, 184, 12148, 3, 12062, 12207, 12176, 46, 12254, 12152, 44, 204, 281, 42, 12131, 12124, 12076, 127, 12190, 37, 9, 3, 42, 12218, 12, 12180, 11860, 12265, 12161, 12146, 12244, 34, 12072, 183, 12271, 12158, 11978, 196, 12174, 184, 79, 186, 167, 12091, 112, 354, 11958, 12241, 55, 12275, 12059, 11923, 12203, 28, 25, 12233, 12156, 75, 12266, 250, 12267, 31, 3, 154, 12207, 109, 177, 202, 12191, 12036, 37, 12110, 12167, 12057, 134, 11977];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = s2[i];
        }
        // message
        bytes memory message = "This is a demo";
        sig.salt =
            "\x35\x00\x31\x8f\x75\xad\x20\xf0\xaa\x20\x62\xba\x1c\x34\x8a\xfe\xaa\x49\x23\x87\xa4\x63\xeb\x8c\x28\xaf\x77\x9d\x6a\x3e\xa6\x96\xeb\xb9\x66\x0c\xcf\xf5\x06\x2d";
        bool result = falcon.verify(message, sig, pk, true);
        assertEq(true, result);
    }
}
