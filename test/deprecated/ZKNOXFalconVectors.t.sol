// code generated using pythonref/generate_deprecated_falcon_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../../src/ZKNOX_NTT.sol";
import "../../src/deprecated/ZKNOX_falcon.sol";

contract ZKNOX_FalconTest is Test {
    ZKNOX_falcon falcon;
    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
        uint256[512] psi_rev = [uint256(1), 10810, 7143, 4043, 10984, 722, 5736, 8155, 3542, 8785, 9744, 3621, 10643, 1212, 3195, 5860, 7468, 2639, 9664, 11340, 11726, 9314, 9283, 9545, 5728, 7698, 5023, 5828, 8961, 6512, 7311, 1351, 2319, 11119, 11334, 11499, 9088, 3014, 5086, 10963, 4846, 9542, 9154, 3712, 4805, 8736, 11227, 9995, 3091, 12208, 7969, 11289, 9326, 7393, 9238, 2366, 11112, 8034, 10654, 9521, 12149, 10436, 7678, 11563, 1260, 4388, 4632, 6534, 2426, 334, 1428, 1696, 2013, 9000, 729, 3241, 2881, 3284, 7197, 10200, 8595, 7110, 10530, 8582, 3382, 11934, 9741, 8058, 3637, 3459, 145, 6747, 9558, 8357, 7399, 6378, 9447, 480, 1022, 9, 9821, 339, 5791, 544, 10616, 4278, 6958, 7300, 8112, 8705, 1381, 9764, 11336, 8541, 827, 5767, 2476, 118, 2197, 7222, 3949, 8993, 4452, 2396, 7935, 130, 2837, 6915, 2401, 442, 7188, 11222, 390, 773, 8456, 3778, 354, 4861, 9377, 5698, 5012, 9808, 2859, 11244, 1017, 7404, 1632, 7205, 27, 9223, 8526, 10849, 1537, 242, 4714, 8146, 9611, 3704, 5019, 11744, 1002, 5011, 5088, 8005, 7313, 10682, 8509, 11414, 9852, 3646, 6022, 2987, 9723, 10102, 6250, 9867, 11224, 2143, 11885, 7644, 1168, 5277, 11082, 3248, 493, 8193, 6845, 2381, 7952, 11854, 1378, 1912, 2166, 3915, 12176, 7370, 12129, 3149, 12286, 4437, 3636, 4938, 5291, 2704, 10863, 7635, 1663, 10512, 3364, 1689, 4057, 9018, 9442, 7875, 2174, 4372, 7247, 9984, 4053, 2645, 5195, 9509, 7394, 1484, 9042, 9603, 8311, 9320, 9919, 2865, 5332, 3510, 1630, 10163, 5407, 3186, 11136, 9405, 10040, 8241, 9890, 8889, 7098, 9153, 9289, 671, 3016, 243, 6730, 420, 10111, 1544, 3985, 4905, 3531, 476, 49, 1263, 5915, 1483, 9789, 10800, 10706, 6347, 1512, 350, 10474, 5383, 5369, 10232, 9087, 4493, 9551, 6421, 6554, 2655, 9280, 1693, 174, 723, 10314, 8532, 347, 2925, 8974, 11863, 1858, 4754, 3030, 4115, 2361, 10446, 2908, 218, 3434, 8760, 3963, 576, 6142, 9842, 1954, 10238, 9407, 10484, 3991, 8320, 9522, 156, 2281, 5876, 10258, 5333, 3772, 418, 5908, 11836, 5429, 7515, 7552, 1293, 295, 6099, 5766, 652, 8273, 4077, 8527, 9370, 325, 10885, 11143, 11341, 5990, 1159, 8561, 8240, 3329, 4298, 12121, 2692, 5961, 7183, 10327, 1594, 6167, 9734, 7105, 11089, 1360, 3956, 6170, 5297, 8210, 11231, 922, 441, 1958, 4322, 1112, 2078, 4046, 709, 9139, 1319, 4240, 8719, 6224, 11454, 2459, 683, 3656, 12225, 10723, 5782, 9341, 9786, 9166, 10542, 9235, 6803, 7856, 6370, 3834, 7032, 7048, 9369, 8120, 9162, 6821, 1010, 8807, 787, 5057, 4698, 4780, 8844, 12097, 1321, 4912, 10240, 677, 6415, 6234, 8953, 1323, 9523, 12237, 3174, 1579, 11858, 9784, 5906, 3957, 9450, 151, 10162, 12231, 12048, 3532, 11286, 1956, 7280, 11404, 6281, 3477, 6608, 142, 11184, 9445, 3438, 11314, 4212, 9260, 6695, 4782, 5886, 8076, 504, 2302, 11684, 11868, 8209, 3602, 6068, 8689, 3263, 6077, 7665, 7822, 7500, 6752, 4749, 4449, 6833, 12142, 8500, 6118, 8471, 1190, 9606, 3860, 5445, 7753, 11239, 5079, 9027, 2169, 11767, 7965, 4916, 8214, 5315, 11011, 9945, 1973, 6715, 8775, 11248, 5925, 11271, 654, 3565, 1702, 1987, 6760, 5206, 3199, 12233, 6136, 6427, 6874, 8646, 4948, 6152, 400, 10561, 5339, 5446, 3710, 6093, 468, 8301, 316, 11907, 10256, 8291, 3879, 1922, 10930, 6854, 973, 11035];

    // forgefmt: disable-next-line
        uint256[512] psi_inv_rev = [uint256(1), 1479, 8246, 5146, 4134, 6553, 11567, 1305, 6429, 9094, 11077, 1646, 8668, 2545, 3504, 8747, 10938, 4978, 5777, 3328, 6461, 7266, 4591, 6561, 2744, 3006, 2975, 563, 949, 2625, 9650, 4821, 726, 4611, 1853, 140, 2768, 1635, 4255, 1177, 9923, 3051, 4896, 2963, 1000, 4320, 81, 9198, 2294, 1062, 3553, 7484, 8577, 3135, 2747, 7443, 1326, 7203, 9275, 3201, 790, 955, 1170, 9970, 5374, 9452, 12159, 4354, 9893, 7837, 3296, 8340, 5067, 10092, 12171, 9813, 6522, 11462, 3748, 953, 2525, 10908, 3584, 4177, 4989, 5331, 8011, 1673, 11745, 6498, 11950, 2468, 12280, 11267, 11809, 2842, 5911, 4890, 3932, 2731, 5542, 12144, 8830, 8652, 4231, 2548, 355, 8907, 3707, 1759, 5179, 3694, 2089, 5092, 9005, 9408, 9048, 11560, 3289, 10276, 10593, 10861, 11955, 9863, 5755, 7657, 7901, 11029, 11813, 8758, 7384, 8304, 10745, 2178, 11869, 5559, 12046, 9273, 11618, 3000, 3136, 5191, 3400, 2399, 4048, 2249, 2884, 1153, 9103, 6882, 2126, 10659, 8779, 6957, 9424, 2370, 2969, 3978, 2686, 3247, 10805, 4895, 2780, 7094, 9644, 8236, 2305, 5042, 7917, 10115, 4414, 2847, 3271, 8232, 10600, 8925, 1777, 10626, 4654, 1426, 9585, 6998, 7351, 8653, 7852, 3, 9140, 160, 4919, 113, 8374, 10123, 10377, 10911, 435, 4337, 9908, 5444, 4096, 11796, 9041, 1207, 7012, 11121, 4645, 404, 10146, 1065, 2422, 6039, 2187, 2566, 9302, 6267, 8643, 2437, 875, 3780, 1607, 4976, 4284, 7201, 7278, 11287, 545, 7270, 8585, 2678, 4143, 7575, 12047, 10752, 1440, 3763, 3066, 12262, 5084, 10657, 4885, 11272, 1045, 9430, 2481, 7277, 6591, 2912, 7428, 11935, 8511, 3833, 11516, 11899, 1067, 5101, 11847, 9888, 1254, 11316, 5435, 1359, 10367, 8410, 3998, 2033, 382, 11973, 3988, 11821, 6196, 8579, 6843, 6950, 1728, 11889, 6137, 7341, 3643, 5415, 5862, 6153, 56, 9090, 7083, 5529, 10302, 10587, 8724, 11635, 1018, 6364, 1041, 3514, 5574, 10316, 2344, 1278, 6974, 4075, 7373, 4324, 522, 10120, 3262, 7210, 1050, 4536, 6844, 8429, 2683, 11099, 3818, 6171, 3789, 147, 5456, 7840, 7540, 5537, 4789, 4467, 4624, 6212, 9026, 3600, 6221, 8687, 4080, 421, 605, 9987, 11785, 4213, 6403, 7507, 5594, 3029, 8077, 975, 8851, 2844, 1105, 12147, 5681, 8812, 6008, 885, 5009, 10333, 1003, 8757, 241, 58, 2127, 12138, 2839, 8332, 6383, 2505, 431, 10710, 9115, 52, 2766, 10966, 3336, 6055, 5874, 11612, 2049, 7377, 10968, 192, 3445, 7509, 7591, 7232, 11502, 3482, 11279, 5468, 3127, 4169, 2920, 5241, 5257, 8455, 5919, 4433, 5486, 3054, 1747, 3123, 2503, 2948, 6507, 1566, 64, 8633, 11606, 9830, 835, 6065, 3570, 8049, 10970, 3150, 11580, 8243, 10211, 11177, 7967, 10331, 11848, 11367, 1058, 4079, 6992, 6119, 8333, 10929, 1200, 5184, 2555, 6122, 10695, 1962, 5106, 6328, 9597, 168, 7991, 8960, 4049, 3728, 11130, 6299, 948, 1146, 1404, 11964, 2919, 3762, 8212, 4016, 11637, 6523, 6190, 11994, 10996, 4737, 4774, 6860, 453, 6381, 11871, 8517, 6956, 2031, 6413, 10008, 12133, 2767, 3969, 8298, 1805, 2882, 2051, 10335, 2447, 6147, 11713, 8326, 3529, 8855, 12071, 9381, 1843, 9928, 8174, 9259, 7535, 10431, 426, 3315, 9364, 11942, 3757, 1975, 11566, 12115, 10596, 3009, 9634, 5735, 5868, 2738, 7796, 3202, 2057, 6920, 6906, 1815, 11939, 10777, 5942, 1583, 1489, 2500, 10806, 6374, 11026, 12240];

    //stateful initialisation
    function setUp() public {
        bytes memory bytecode_psirev = abi.encodePacked(psi_rev);

        address a_psirev; //address of the precomputations bytecode contract
        a_psirev = address(uint160(0xcaca)); //here it is etched, use create in the future
        vm.etch(a_psirev, bytecode_psirev); //pushing psirev bytecode into contract todo : replace with create

        bytes memory bytecode_psiInvrev = abi.encodePacked(psi_inv_rev);

        address a_psiInvrev; //address of the precomputations bytecode contract
        a_psiInvrev = address(uint160(0xa5a5)); //here it is etched, use create in the future
        vm.etch(a_psiInvrev, bytecode_psiInvrev); //pushing psirev bytecode into contract todo : replace with create

        ntt.update(a_psirev, a_psiInvrev, 12289, 12265); //update ntt with outer contract

        falcon = new ZKNOX_falcon(ntt);
    }

    function testVector0() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(12205), 12232,146,280,180,43,12281,12002,126,12204,17,74,12196,360,189,128,39,104,12143,81,54,17,103,12249,12261,12227,12170,12184,12199,180,9,12204,198,135,12244,12132,12257,12249,27,12030,340,48,12185,12270,206,12139,47,51,44,11998,12196,251,6,12185,12095,157,12013,187,19,227,173,103,14,12256,161,378,12245,12131,12268,11886,184,11999,12257,229,12003,64,15,11997,12288,70,12015,12258,12188,194,12162,122,12269,21,292,11961,210,12152,12147,147,90,12036,101,12215,198,12136,12152,14,12278,198,23,12253,12181,12220,25,15,10,11972,4,104,12285,0,58,12170,12153,180,267,12167,77,12288,300,115,12202,151,42,12172,12179,12245,12206,11938,12152,12033,11958,93,11,11892,12199,422,80,12272,12168,14,12107,211,202,49,28,12118,168,70,64,93,12211,12006,55,12160,12071,156,12278,84,12004,160,12172,12167,12001,11968,141,11950,147,12238,12147,12165,12137,54,181,11990,251,64,12125,12017,160,77,12253,12063,12110,12115,82,48,138,12215,12098,12190,12189,80,12053,160,244,12210,151,10,12271,12250,12259,198,121,12184,12142,165,12237,12283,6,170,201,12147,12229,131,106,125,6,368,12147,57,11803,48,202,12268,12161,12103,120,12028,117,156,12246,12246,12079,12162,12281,12259,27,135,69,12227,171,161,215,12143,12125,23,11848,12041,12281,178,12050,12,108,114,12228,12142,12222,77,12194,12213,172,232,5,143,317,20,12100,12130,12006,97,12223,197,61,152,12277,12270,18,5,158,12140,12113,12233,12288,12008,12211,11975,12230,12287,12163,151,144,118,279,12144,12170,12113,12037,86,150,12172,63,12279,12252,12143,12169,91,116,12028,12227,28,12215,12088,12067,11933,12284,67,12004,209,12217,80,223,12196,33,12238,9,230,12074,12189,193,12265,100,23,55,11999,12186,12185,12278,174,97,12112,12216,169,196,207,2,215,12106,257,174,12194,87,178,12191,110,210,203,12034,17,105,16,66,139,55,11901,114,12210,131,12275,6,62,11896,352,429,63,12154,156,17,12046,149,5,63,12135,299,12125,355,126,12148,12029,12251,179,12148,86,13,107,133,136,38,268,277,12195,92,12281,76,84,4,12077,12088,136,12263,12171,12069,112,12226,109,62,12045,12220,12183,223,12164,12169,12210,12253,64,12218,246,12150,12250,72,232,12275,12105,12213,134,34,12201,15,11996,12128,5,12024,12098,11987,133,121,107,11921,11996,48,12200,12119,172,240,12245,12111,12245,12213,12222,30,25,12237,12237,417,12088,12061,12265,12266,216,12193,156,222,12228,12244,12072,12132,2,87,96,12198,19,64,194,105,120,51,73,11918,120,188,128,47,12010,226,12284,3,49,12211,12279,245,12115,44,12147,12008,42,51,12192];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Renaud from ZKNOX!!!!";
        sig.salt =
            "\x46\xb9\xdd\x2b\x0b\xa8\x8d\x13\x23\x3b\x3f\xeb\x74\x3e\xeb\x24\x3f\xcd\x52\xea\x62\xb8\x1b\x82\xb5\x0c\x27\x64\x6e\xd5\x76\x2f\xd7\x5d\xc4\xdd\xd8\xc0\xf2\x00";
        bool result = falcon.verify(message, sig, pk, true);
        assertEq(true, result);
    }

    function testVector1() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(201), 245,12233,12281,12269,12129,59,12080,186,20,12176,12286,154,12245,182,12135,30,12245,12132,11944,124,20,3,12124,80,243,98,104,12089,12276,12195,215,12189,12187,82,12227,105,98,12277,23,12046,199,12186,60,54,12242,260,169,146,12108,127,12256,12255,12124,12212,12211,12206,317,12239,61,112,189,12215,110,282,12211,12126,17,61,254,33,27,12223,12194,12233,12251,12141,29,12158,30,198,12258,80,11917,12160,12211,287,11973,125,12058,12178,213,12216,12204,12251,12135,177,12263,12261,94,12172,12141,81,11933,179,12151,223,311,12190,12043,139,11983,12132,163,12205,12235,183,12219,221,26,12273,12056,12204,12150,12216,12188,209,189,9,51,12106,11993,143,12101,68,167,12108,262,188,152,26,219,12170,84,12126,12176,221,12069,11936,418,12283,137,413,12205,452,61,12286,12180,12125,92,12240,13,12173,12044,95,142,12204,134,173,277,76,12224,52,361,106,12141,168,229,12116,12190,12055,12028,12169,68,12063,78,20,12074,12052,11933,37,34,314,12162,145,12133,47,4,12272,375,96,12220,191,28,24,171,12138,12105,39,12107,12097,124,301,12075,12237,279,12161,11976,11996,29,161,272,12185,163,12167,85,12006,11876,12269,213,12,251,11918,12211,12236,12213,11906,193,12227,12239,12235,99,11898,12188,12137,12094,12088,12102,12065,121,72,80,12096,12123,23,33,275,130,12206,89,283,394,216,2,12244,12284,12180,12246,12037,12246,247,78,35,355,74,52,12125,295,12139,12223,88,12259,12279,12142,227,12140,244,140,12251,12133,12284,169,306,18,12156,44,12263,53,42,362,12185,215,12139,11918,12172,12243,12014,12132,138,12191,6,11939,12023,31,110,12196,53,10,5,88,151,45,12209,37,4,189,12144,12176,12182,12108,131,223,207,88,176,63,106,44,12254,92,12162,10,12246,185,12004,12279,43,12213,12242,56,12255,229,12228,4,26,114,206,20,239,127,177,12126,12197,12019,12128,29,12222,11877,12226,113,159,12173,12231,200,12075,83,76,12170,78,330,21,86,12256,12163,146,16,165,12215,12145,227,11889,295,219,12255,42,12237,92,12113,12267,201,12161,12178,69,192,12206,334,28,11972,12132,251,12210,12215,39,12208,52,427,60,5,12224,11878,125,50,182,12232,12129,90,304,29,12193,16,12280,11896,12212,48,12188,12205,12263,12246,11889,12161,55,128,100,79,11943,122,152,12059,353,12246,12114,12091,12029,12209,15,12231,15,12062,228,409,11950,11786,290,12127,11944,12265,59,11863,12243,12174,27,11647,12079,131,12259,26,35,12283,80,21,316,12214,12187,12172,12257,12205,12248,142,12211,299,12041,241,12281,12231,12286,24,12280,89,12270,112,12231,136,12080,48,394,12147,71,12279,338,12138,289,42];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Simon also from ZKNOX";
        sig.salt =
            "\x34\x9e\xc7\x55\x46\xf5\x8f\xb7\xc2\x77\x5c\x38\x46\x2c\x50\x10\xd8\x46\xc1\x85\xc1\x51\x11\xe5\x95\x52\x2a\x6b\xcd\x16\xcf\x86\xf3\xd1\x22\x10\x9e\x3b\x1f\xdd";
        bool result = falcon.verify(message, sig, pk, true);
        assertEq(true, result);
    }

    function testVector2() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(12125), 12075,12019,11986,12100,25,63,43,11967,34,11931,12040,32,12285,12243,279,11882,41,12210,409,15,92,164,12199,12116,12281,249,12090,173,179,89,12263,83,12260,119,279,12283,180,2,69,264,86,12147,81,201,12155,12287,62,12247,40,140,557,12108,209,91,12277,147,127,259,151,136,110,300,285,21,186,12211,12268,12283,12090,11904,170,65,226,12276,189,12197,40,12234,12096,99,236,13,273,12048,12217,12212,12047,79,12278,12016,222,9,31,12271,12,446,12009,126,24,145,6,96,155,114,5,12270,135,12206,12275,12239,98,147,12281,113,12094,130,85,0,183,16,123,94,195,126,181,12133,12119,12259,12284,1,172,12235,44,34,12192,92,12106,12186,12024,12194,12246,12229,12271,9,12196,38,12126,12120,57,66,12135,65,82,155,128,40,40,11954,12110,3,12241,235,12197,187,105,12128,141,71,12241,149,12263,11901,12003,49,73,276,218,12027,10,77,44,43,12108,330,237,12272,207,12199,12236,11995,12245,151,12272,12144,12107,12117,12246,49,45,12177,12275,12261,55,12107,91,257,177,74,122,12193,317,189,12009,194,11967,266,12229,12208,12239,12256,352,12239,12184,12040,207,12115,102,12224,96,17,12202,12189,12139,237,12263,67,55,12265,98,12223,14,241,100,12084,12071,337,11898,11909,215,12034,231,12203,102,12008,12239,186,217,333,363,112,12220,11903,102,101,9,150,31,71,8,152,68,11,146,145,35,12280,67,12083,65,27,78,12188,12267,192,109,51,171,12142,212,101,344,12092,12129,77,9,122,12013,12072,109,155,12215,12072,216,223,12262,12206,141,92,62,193,11879,199,67,181,12274,20,12187,212,12252,12185,194,3,12205,12240,12229,12145,37,110,56,12134,12175,12097,323,56,174,97,240,53,12284,12275,423,56,49,12079,12284,11934,75,12252,43,12115,12144,48,175,11977,12230,12257,242,138,101,12238,12189,104,0,76,179,12264,12232,19,91,163,12263,12019,12239,159,40,111,12141,12280,169,174,75,297,102,12198,68,179,301,333,18,55,12160,12126,68,12192,14,12202,12255,24,44,143,12128,12181,20,331,51,12282,12200,127,84,11795,152,416,155,12001,67,12195,12174,152,12123,12029,25,216,184,12223,12218,12200,12267,12092,12213,12104,12284,12142,12157,12266,12243,167,12147,96,105,12287,12120,12215,12265,12205,43,12095,12100,12276,12026,12028,12216,12204,12040,12079,92,12131,12142,26,317,139,12130,12087,136,12209,12219,29,50,4,12209,55,245,54,12247,12192,12128,33,10,12041,12177,12235,68,11893,12252,12265,166,152,12277,79,35,428,12268,12104,88,196,76,121,12108,22,12116,87,12223,15,114,12155,316,12161,39,34,12089,244,12019];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Nicolas from ZKNOXtoo";
        sig.salt =
            "\xaa\xae\x31\x4e\xd9\x08\x3d\xab\x4b\x09\x9f\x8e\x30\x0f\x01\xb8\x65\x0f\x1f\x4b\x1d\x8f\xcf\x3f\x3c\xb5\x3f\xb8\xe9\xeb\x2e\xa2\x03\xbd\xc9\x70\xf5\x0a\xe5\x54";
        bool result = falcon.verify(message, sig, pk, true);
        assertEq(true, result);
    }

    function testVector3() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(12283), 194,12247,19,12099,60,12116,12032,0,11972,12231,12098,6,12215,63,79,11745,94,12095,12255,12266,12027,12259,126,163,169,12234,12271,12191,60,12163,12089,1,12277,186,12197,86,129,301,57,114,12197,159,6,318,133,156,67,118,31,12242,100,12176,12176,12244,11864,102,74,459,9,57,12186,12280,12189,41,16,12281,12208,12220,206,12261,84,124,14,12158,12229,11827,12139,296,84,11923,12214,36,12264,12242,12238,12021,12123,12147,12187,179,8,190,12273,98,12236,301,12175,128,11936,42,12167,87,12229,177,1,12101,12001,12219,123,12239,12251,133,245,87,25,14,167,53,12211,19,12124,24,12049,73,22,131,146,12230,12267,201,12252,168,12112,6,181,196,12180,97,12220,12208,12124,12173,12189,12240,348,11990,315,12186,272,12001,97,24,83,12152,70,463,12046,12126,7,72,188,12271,153,12242,105,36,375,52,100,191,316,12061,12231,12130,440,12208,286,255,93,12189,12166,146,161,12172,228,132,51,12073,12248,12113,12178,258,12167,11977,3,12098,12207,94,12222,416,12129,179,11953,12168,12263,12207,12163,128,119,98,12224,12226,12220,251,187,12081,11856,12239,12285,69,12210,92,12133,152,19,36,48,152,12268,118,27,161,169,132,261,122,96,12207,12174,12009,7,109,12109,138,12125,83,12183,55,368,12206,12079,272,12081,12117,208,53,12210,12124,12004,12151,11959,12283,183,322,12196,116,186,142,68,12149,50,12029,12211,12234,91,31,11987,12076,144,204,227,115,12085,12099,12286,9,12211,12279,12080,305,12248,12095,12248,12148,12081,113,41,42,66,61,12015,12209,206,93,146,12018,12283,15,164,97,42,12160,11940,137,160,12269,12039,284,11952,41,213,328,12186,12149,288,12266,170,298,12170,12079,12264,11902,42,243,115,27,12038,12190,11942,23,23,12256,12184,12046,12235,181,12114,1,12138,111,13,20,214,12278,185,51,12240,3,291,12247,12236,120,159,27,12137,219,12253,12195,168,12081,12277,29,48,211,58,154,12020,12254,12281,11,123,286,155,47,90,12208,12284,12241,239,130,124,183,12272,12273,12134,12133,12209,27,12269,199,12133,145,2,219,12258,12121,4,218,12266,12258,439,70,72,138,99,53,267,12162,12113,12175,1,204,77,4,99,12246,12273,12155,111,197,58,12273,12135,422,42,12171,12090,44,57,472,11844,12047,12059,130,200,67,12211,11971,23,12088,161,12269,106,12192,12189,12119,12053,12077,12244,12261,166,227,12090,12211,0,12213,12095,12098,4,12185,12146,103,79,9,16,26,108,78,12189,12210,196,12228,12244,12179,12237,44,12154,12207,12227,134,12203,12278,12063,12192,141,12270,302,12089,118,122,12132,1,12211,12197,12053,137,12239,12204,199,12241,37];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "We are ZKNox, you already know!!";
        sig.salt =
            "\xf9\xa6\x6d\x13\x68\xb2\x08\xe2\x1f\x7c\x10\xd0\x4a\x3d\xbd\x4e\x36\x06\x33\xe5\xdb\x4b\x60\x26\x01\xc1\x4c\xea\x73\x7d\xb3\xdc\xf7\x22\x63\x2c\xc7\x78\x51\xcb";
        bool result = falcon.verify(message, sig, pk, true);
        assertEq(true, result);
    }

    function testVector4() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(114), 10,165,12030,11883,51,12049,21,182,172,12195,117,272,12134,12116,11967,66,214,483,258,147,397,12105,12163,84,12102,12108,0,35,12205,110,101,11973,85,12265,85,12116,79,256,137,12126,12131,12271,12269,12213,144,110,49,12199,12252,12204,85,12130,303,12284,112,150,12121,193,12135,11843,51,24,444,66,214,73,16,12074,307,12150,209,12282,12208,207,41,47,12248,12241,200,426,12223,12160,160,12277,57,12205,142,12225,8,12281,12239,151,12215,413,41,12088,12115,12285,44,2,113,12206,152,12232,84,12184,31,3,229,165,12132,12146,12283,12187,133,67,12220,12107,11881,12172,115,12284,242,11963,12221,26,0,11872,12143,100,74,157,12278,12059,12169,53,12171,12139,408,12271,12284,109,37,12283,12024,356,119,11979,12287,12143,16,42,12255,45,57,115,12247,12150,12270,267,12281,12144,16,9,12229,82,94,152,12213,133,12188,29,16,11997,12069,12229,168,229,14,12014,95,12100,12254,12038,132,12138,12181,12089,70,17,164,296,12203,12193,175,12005,12168,12132,240,73,135,88,12237,85,157,12233,23,12209,20,23,12128,12219,12194,56,394,166,204,12243,11998,12108,12145,74,12147,122,19,11970,139,271,12282,39,196,92,12205,12081,171,121,12184,147,12070,114,320,260,13,12134,12185,12247,12190,6,12268,12078,117,12066,12253,101,12052,12277,12072,12237,213,12132,12080,12208,12249,12221,12280,165,75,25,12257,125,12269,12057,11967,180,265,254,15,12096,12116,298,12178,76,12279,12285,12257,12282,12247,12054,45,6,44,141,12282,12283,201,240,11992,145,12205,84,196,77,111,12152,167,12052,12110,59,273,12011,12206,17,12258,12278,12200,12235,12222,12210,222,279,94,120,12,12177,77,275,262,12114,12222,12116,12102,12242,216,330,143,12271,11948,12251,12151,103,4,11933,12223,161,118,12203,247,12026,12258,310,12194,12261,84,28,12142,77,12268,12235,12182,12039,11979,12048,12261,12184,11974,12183,11994,42,12083,12179,12144,132,12209,12275,3,66,138,11,12172,12189,45,144,12125,78,129,37,12118,20,12085,247,189,252,12211,28,31,12247,12140,12013,12107,12197,12180,91,12064,243,9,12271,12232,12217,219,142,12280,176,12036,153,12136,57,217,10,338,12287,273,233,27,120,12204,12276,147,12088,12248,12256,11994,12081,12270,12222,12239,12230,190,338,147,158,305,86,12252,60,302,12220,346,141,12023,150,43,12147,153,17,12084,12274,12108,167,12012,146,12211,12226,12256,14,37,12146,129,109,170,12031,153,70,60,9,11895,11989,12106,49,134,12071,21,100,12265,335,7,67,12099,188,52,12221,329,12086,12179,399,10,139,12069,12085,12269,150,12139,12209,12020,253,12285,42,12201,12203,12182,234,12235];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "Practical security on the chain.";
        sig.salt =
            "\x14\x30\x45\xd7\x91\xcc\x85\xef\xf5\xb2\x19\x32\xf2\x38\x61\xbc\xf2\x3a\x52\xb5\xda\x67\xea\xf7\xba\xae\x0f\x5f\xb1\x36\x9d\xb7\x8f\x3a\xc4\x5f\x8c\x4a\xc5\x67";
        bool result = falcon.verify(message, sig, pk, true);
        assertEq(true, result);
    }
}
