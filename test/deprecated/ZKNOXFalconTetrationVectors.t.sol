// code generated using pythonref/generate_deprecated_falcon_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../../src/ZKNOX_NTT.sol";
import "../../src/deprecated/ZKNOX_falcon.sol";

contract ZKNOX_FalconTest is Test {
    ZKNOX_falcon falcon;
    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
        uint256[512] psi_rev = [uint256(1), 10810, 7143, 4043, 10984, 722, 5736, 8155, 3542, 8785, 9744, 3621, 10643, 1212, 3195, 5860, 7468, 2639, 9664, 11340, 11726, 9314, 9283, 9545, 5728, 7698, 5023, 5828, 8961, 6512, 7311, 1351, 2319, 11119, 11334, 11499, 9088, 3014, 5086, 10963, 4846, 9542, 9154, 3712, 4805, 8736, 11227, 9995, 3091, 12208, 7969, 11289, 9326, 7393, 9238, 2366, 11112, 8034, 10654, 9521, 12149, 10436, 7678, 11563, 1260, 4388, 4632, 6534, 2426, 334, 1428, 1696, 2013, 9000, 729, 3241, 2881, 3284, 7197, 10200, 8595, 7110, 10530, 8582, 3382, 11934, 9741, 8058, 3637, 3459, 145, 6747, 9558, 8357, 7399, 6378, 9447, 480, 1022, 9, 9821, 339, 5791, 544, 10616, 4278, 6958, 7300, 8112, 8705, 1381, 9764, 11336, 8541, 827, 5767, 2476, 118, 2197, 7222, 3949, 8993, 4452, 2396, 7935, 130, 2837, 6915, 2401, 442, 7188, 11222, 390, 773, 8456, 3778, 354, 4861, 9377, 5698, 5012, 9808, 2859, 11244, 1017, 7404, 1632, 7205, 27, 9223, 8526, 10849, 1537, 242, 4714, 8146, 9611, 3704, 5019, 11744, 1002, 5011, 5088, 8005, 7313, 10682, 8509, 11414, 9852, 3646, 6022, 2987, 9723, 10102, 6250, 9867, 11224, 2143, 11885, 7644, 1168, 5277, 11082, 3248, 493, 8193, 6845, 2381, 7952, 11854, 1378, 1912, 2166, 3915, 12176, 7370, 12129, 3149, 12286, 4437, 3636, 4938, 5291, 2704, 10863, 7635, 1663, 10512, 3364, 1689, 4057, 9018, 9442, 7875, 2174, 4372, 7247, 9984, 4053, 2645, 5195, 9509, 7394, 1484, 9042, 9603, 8311, 9320, 9919, 2865, 5332, 3510, 1630, 10163, 5407, 3186, 11136, 9405, 10040, 8241, 9890, 8889, 7098, 9153, 9289, 671, 3016, 243, 6730, 420, 10111, 1544, 3985, 4905, 3531, 476, 49, 1263, 5915, 1483, 9789, 10800, 10706, 6347, 1512, 350, 10474, 5383, 5369, 10232, 9087, 4493, 9551, 6421, 6554, 2655, 9280, 1693, 174, 723, 10314, 8532, 347, 2925, 8974, 11863, 1858, 4754, 3030, 4115, 2361, 10446, 2908, 218, 3434, 8760, 3963, 576, 6142, 9842, 1954, 10238, 9407, 10484, 3991, 8320, 9522, 156, 2281, 5876, 10258, 5333, 3772, 418, 5908, 11836, 5429, 7515, 7552, 1293, 295, 6099, 5766, 652, 8273, 4077, 8527, 9370, 325, 10885, 11143, 11341, 5990, 1159, 8561, 8240, 3329, 4298, 12121, 2692, 5961, 7183, 10327, 1594, 6167, 9734, 7105, 11089, 1360, 3956, 6170, 5297, 8210, 11231, 922, 441, 1958, 4322, 1112, 2078, 4046, 709, 9139, 1319, 4240, 8719, 6224, 11454, 2459, 683, 3656, 12225, 10723, 5782, 9341, 9786, 9166, 10542, 9235, 6803, 7856, 6370, 3834, 7032, 7048, 9369, 8120, 9162, 6821, 1010, 8807, 787, 5057, 4698, 4780, 8844, 12097, 1321, 4912, 10240, 677, 6415, 6234, 8953, 1323, 9523, 12237, 3174, 1579, 11858, 9784, 5906, 3957, 9450, 151, 10162, 12231, 12048, 3532, 11286, 1956, 7280, 11404, 6281, 3477, 6608, 142, 11184, 9445, 3438, 11314, 4212, 9260, 6695, 4782, 5886, 8076, 504, 2302, 11684, 11868, 8209, 3602, 6068, 8689, 3263, 6077, 7665, 7822, 7500, 6752, 4749, 4449, 6833, 12142, 8500, 6118, 8471, 1190, 9606, 3860, 5445, 7753, 11239, 5079, 9027, 2169, 11767, 7965, 4916, 8214, 5315, 11011, 9945, 1973, 6715, 8775, 11248, 5925, 11271, 654, 3565, 1702, 1987, 6760, 5206, 3199, 12233, 6136, 6427, 6874, 8646, 4948, 6152, 400, 10561, 5339, 5446, 3710, 6093, 468, 8301, 316, 11907, 10256, 8291, 3879, 1922, 10930, 6854, 973, 11035];

    // forgefmt: disable-next-line
        uint256[512] psi_inv_rev = [uint256(1), 1479, 8246, 5146, 4134, 6553, 11567, 1305, 6429, 9094, 11077, 1646, 8668, 2545, 3504, 8747, 10938, 4978, 5777, 3328, 6461, 7266, 4591, 6561, 2744, 3006, 2975, 563, 949, 2625, 9650, 4821, 726, 4611, 1853, 140, 2768, 1635, 4255, 1177, 9923, 3051, 4896, 2963, 1000, 4320, 81, 9198, 2294, 1062, 3553, 7484, 8577, 3135, 2747, 7443, 1326, 7203, 9275, 3201, 790, 955, 1170, 9970, 5374, 9452, 12159, 4354, 9893, 7837, 3296, 8340, 5067, 10092, 12171, 9813, 6522, 11462, 3748, 953, 2525, 10908, 3584, 4177, 4989, 5331, 8011, 1673, 11745, 6498, 11950, 2468, 12280, 11267, 11809, 2842, 5911, 4890, 3932, 2731, 5542, 12144, 8830, 8652, 4231, 2548, 355, 8907, 3707, 1759, 5179, 3694, 2089, 5092, 9005, 9408, 9048, 11560, 3289, 10276, 10593, 10861, 11955, 9863, 5755, 7657, 7901, 11029, 11813, 8758, 7384, 8304, 10745, 2178, 11869, 5559, 12046, 9273, 11618, 3000, 3136, 5191, 3400, 2399, 4048, 2249, 2884, 1153, 9103, 6882, 2126, 10659, 8779, 6957, 9424, 2370, 2969, 3978, 2686, 3247, 10805, 4895, 2780, 7094, 9644, 8236, 2305, 5042, 7917, 10115, 4414, 2847, 3271, 8232, 10600, 8925, 1777, 10626, 4654, 1426, 9585, 6998, 7351, 8653, 7852, 3, 9140, 160, 4919, 113, 8374, 10123, 10377, 10911, 435, 4337, 9908, 5444, 4096, 11796, 9041, 1207, 7012, 11121, 4645, 404, 10146, 1065, 2422, 6039, 2187, 2566, 9302, 6267, 8643, 2437, 875, 3780, 1607, 4976, 4284, 7201, 7278, 11287, 545, 7270, 8585, 2678, 4143, 7575, 12047, 10752, 1440, 3763, 3066, 12262, 5084, 10657, 4885, 11272, 1045, 9430, 2481, 7277, 6591, 2912, 7428, 11935, 8511, 3833, 11516, 11899, 1067, 5101, 11847, 9888, 1254, 11316, 5435, 1359, 10367, 8410, 3998, 2033, 382, 11973, 3988, 11821, 6196, 8579, 6843, 6950, 1728, 11889, 6137, 7341, 3643, 5415, 5862, 6153, 56, 9090, 7083, 5529, 10302, 10587, 8724, 11635, 1018, 6364, 1041, 3514, 5574, 10316, 2344, 1278, 6974, 4075, 7373, 4324, 522, 10120, 3262, 7210, 1050, 4536, 6844, 8429, 2683, 11099, 3818, 6171, 3789, 147, 5456, 7840, 7540, 5537, 4789, 4467, 4624, 6212, 9026, 3600, 6221, 8687, 4080, 421, 605, 9987, 11785, 4213, 6403, 7507, 5594, 3029, 8077, 975, 8851, 2844, 1105, 12147, 5681, 8812, 6008, 885, 5009, 10333, 1003, 8757, 241, 58, 2127, 12138, 2839, 8332, 6383, 2505, 431, 10710, 9115, 52, 2766, 10966, 3336, 6055, 5874, 11612, 2049, 7377, 10968, 192, 3445, 7509, 7591, 7232, 11502, 3482, 11279, 5468, 3127, 4169, 2920, 5241, 5257, 8455, 5919, 4433, 5486, 3054, 1747, 3123, 2503, 2948, 6507, 1566, 64, 8633, 11606, 9830, 835, 6065, 3570, 8049, 10970, 3150, 11580, 8243, 10211, 11177, 7967, 10331, 11848, 11367, 1058, 4079, 6992, 6119, 8333, 10929, 1200, 5184, 2555, 6122, 10695, 1962, 5106, 6328, 9597, 168, 7991, 8960, 4049, 3728, 11130, 6299, 948, 1146, 1404, 11964, 2919, 3762, 8212, 4016, 11637, 6523, 6190, 11994, 10996, 4737, 4774, 6860, 453, 6381, 11871, 8517, 6956, 2031, 6413, 10008, 12133, 2767, 3969, 8298, 1805, 2882, 2051, 10335, 2447, 6147, 11713, 8326, 3529, 8855, 12071, 9381, 1843, 9928, 8174, 9259, 7535, 10431, 426, 3315, 9364, 11942, 3757, 1975, 11566, 12115, 10596, 3009, 9634, 5735, 5868, 2738, 7796, 3202, 2057, 6920, 6906, 1815, 11939, 10777, 5942, 1583, 1489, 2500, 10806, 6374, 11026, 12240];

    //stateful initialisation
    function setUp() public {
        bytes memory bytecode_psirev = abi.encodePacked(psi_rev);

        address a_psirev; //address of the precomputations bytecode contract
        a_psirev = address(uint160(0xcaca)); //here it is etched, use create in the future
        vm.etch(a_psirev, bytecode_psirev); //pushing psirev bytecode into contract todo : replace with create

        bytes memory bytecode_psiInvrev = abi.encodePacked(psi_inv_rev);

        address a_psiInvrev; //address of the precomputations bytecode contract
        a_psiInvrev = address(uint160(0xa5a5)); //here it is etched, use create in the future
        vm.etch(a_psiInvrev, bytecode_psiInvrev); //pushing psirev bytecode into contract todo : replace with create

        ntt.update(a_psirev, a_psiInvrev, 12289, 12265); //update ntt with outer contract

        falcon = new ZKNOX_falcon(ntt);
    }

    function testVector0() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(75), 55,12190,110,19,20,12125,12042,12277,80,10,12211,12083,90,12140,12264,11941,12210,12262,12279,158,11942,12008,10,12253,12108,12252,12143,90,12207,12232,20,51,119,12037,11976,43,12136,166,20,12233,12285,12241,36,12235,323,55,12108,12091,11996,12212,12187,12285,12059,37,12110,59,12132,191,40,54,12252,138,12263,12033,12170,12151,75,12279,12222,12140,183,168,66,206,12229,12094,11998,12272,228,175,12090,12255,40,40,42,12130,44,340,12287,12069,64,92,175,12246,12105,12092,12225,65,12241,29,330,12283,12076,12185,168,306,12227,12213,197,12252,12240,119,83,213,12273,12068,12257,139,12239,12236,53,42,12127,12257,12177,12138,85,16,12284,12267,82,12268,12163,12201,12180,12142,12202,12000,73,12247,236,12189,12212,104,176,12230,94,12075,109,227,12062,12249,12252,204,120,34,12162,165,12169,129,12192,276,189,179,12119,216,12257,169,214,150,190,12229,12216,164,241,12200,12178,12218,12225,12270,114,123,193,12088,12114,12251,12245,12088,12168,35,12288,103,12184,153,160,12186,12137,12011,122,12048,41,67,12090,33,25,12214,12129,12052,12209,75,12259,160,5,12194,264,168,12145,111,12156,375,12174,187,12275,12125,142,12285,116,12242,12246,163,12173,18,12211,12207,12192,30,137,12192,15,12068,12072,104,12024,20,87,12037,109,157,12142,12198,237,12142,12261,75,96,12224,73,12098,11980,141,12242,12150,12157,138,253,357,12213,12183,23,112,12130,91,12039,11898,64,284,25,174,9,51,215,34,177,314,12047,12282,12250,14,12093,12241,12008,95,7,12180,12142,59,69,128,224,178,23,94,12266,85,62,12231,121,266,50,166,12243,12088,96,12256,12270,13,14,11891,12216,12106,22,145,12097,129,12067,43,12269,22,109,146,142,254,12096,84,48,85,179,5,81,12201,155,193,12235,105,221,78,12180,172,143,12097,12046,12144,12286,285,12012,12151,45,69,12153,139,12062,90,219,138,99,12175,12170,12164,12207,125,262,12116,12222,12009,12191,53,84,12165,12138,126,12132,229,12281,12068,12,198,12238,12175,24,62,160,75,174,97,12140,202,45,75,12143,12053,223,12268,17,221,12091,12266,28,127,273,12119,232,12256,131,34,38,12097,69,12029,343,12001,63,141,6,12215,97,12264,226,188,12112,12275,12232,12276,94,12196,12188,12168,12199,52,39,69,272,12226,12191,12268,9,12268,350,12134,222,12207,11898,261,171,12163,191,12277,12256,155,12169,18,12097,44,539,126,24,12215,12186,100,12116,176,50,12202,228,5,12252,12231,156,109,456,11991,12212,59,12276,12034,22,5,437,12008,12086,12141,12229,12270,88,87,12279,12201,11991,12178,29,39,53,12221,70,12069,12115,66,8,12192,107,137,49];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Renaud from ZKNOX!!!!";
        sig.salt =
            "\xab\x0b\xae\x31\x63\x39\x89\x43\x04\xe3\x58\x77\xb0\xc2\x8a\x9b\x1f\xd1\x66\xc7\x96\xb9\xcc\x25\x8a\x06\x4a\x8f\x57\xe2\x7f\x2a\x5b\x8d\x54\x8a\x72\x8c\x94\x44";
        bool result = falcon.verify(message, sig, pk, false);
        assertEq(true, result);
    }

    function testVector1() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(208), 12198,12267,12179,12189,12226,11975,12186,76,12106,12255,12140,25,12148,151,112,42,12196,12255,12144,66,297,121,12091,12177,12023,12252,128,12193,215,11981,12258,12127,166,12257,10,325,19,12148,12163,301,12100,12242,11996,12096,88,181,12227,147,12160,65,396,12209,12079,12230,12278,248,12072,177,107,12206,12174,78,12167,5,261,12182,158,46,12142,252,12030,273,12003,12258,16,12097,5,7,12138,12253,12232,12189,11928,12285,12116,73,12098,12108,58,274,46,12199,200,49,12210,147,147,208,19,12264,12054,221,9,12169,12210,19,37,129,36,12260,65,63,12151,104,12000,12191,281,12242,93,221,12287,216,12254,173,12240,12211,124,49,12212,57,163,266,184,53,12264,59,12117,65,12257,64,12168,12065,55,251,12153,11987,12283,12190,12213,12090,12137,12156,12170,11917,157,12094,12091,178,12171,9,114,9,12098,12283,12182,288,50,12100,12233,80,12232,12050,98,127,168,11984,12247,12282,75,12170,12064,12257,8,12193,12197,87,22,11819,127,12075,90,64,12108,12177,12084,11961,11,114,35,48,103,12266,238,202,19,11993,12262,185,12127,86,12005,86,12269,12207,336,223,12227,30,195,31,12047,290,12102,137,194,134,34,12229,12207,12004,107,12069,465,131,178,12055,12166,106,12181,12277,12210,12239,4,12255,12251,350,11873,66,12236,29,242,12167,12144,205,0,12117,12221,12021,11752,119,12094,118,12218,12105,12097,140,12167,12125,226,12247,124,12128,12245,157,11941,78,12155,130,235,69,168,164,12159,41,12225,86,299,12256,12285,12095,12284,11718,12045,166,12220,425,135,12261,12200,11961,40,12259,308,88,12121,113,12136,196,245,93,12231,12242,12255,12129,12153,12063,12154,9,210,61,59,12242,12225,12212,11978,27,12247,12262,8,244,183,12225,188,118,12229,12031,15,255,12256,194,11986,12101,245,100,12177,12267,14,209,12265,11928,144,14,148,12287,0,267,90,12106,12223,12062,20,116,110,12265,12269,180,252,20,12206,264,12121,223,58,12166,12165,91,12099,276,183,241,24,12044,12028,12113,131,116,12215,12141,12184,13,12116,11930,12256,12238,146,20,12146,12100,77,145,164,12247,12247,36,174,15,128,12190,197,95,241,12158,12131,266,102,12067,345,245,12080,12142,47,12137,12075,129,12195,1,12034,206,12097,98,12157,12214,12277,12200,12288,12100,12271,12151,47,154,12144,12252,12083,191,11961,4,51,26,12147,5,12109,37,12190,327,197,12194,12205,41,162,12078,12243,12278,12229,113,12232,71,12130,12229,106,12152,12185,12126,12150,139,101,12201,12279,22,103,12155,47,12216,12269,60,236,18,134,12110,43,33,12259,12194,90,92,62,12022,12116,79,11808,12182,251,309,12172,11955,301,12226,12142,12215,63,63,12253];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Simon also from ZKNOX";
        sig.salt =
            "\x91\x89\x90\xff\x93\xe0\x65\x6b\x5f\x75\xb0\x87\x29\xc6\x0e\x6a\x9d\x73\x52\xb9\xef\xd2\xe3\x3e\x3d\x1b\xa6\xe6\xd8\x9e\xdf\xa6\x71\x26\x6e\xce\x6b\xe7\xbb\x5a";
        bool result = falcon.verify(message, sig, pk, false);
        assertEq(true, result);
    }

    function testVector2() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(12203), 71,12221,12236,40,243,27,57,232,41,17,12,12171,139,253,27,90,94,12200,7,12230,224,258,0,12283,73,12148,12278,11994,12177,5,11,76,130,12180,12214,51,141,327,224,80,12230,12196,12092,12124,126,12222,136,12138,30,13,11962,11947,12233,31,103,146,244,219,12117,11991,146,96,381,18,282,186,78,30,12058,320,191,24,115,209,301,12220,212,92,148,12135,160,265,12225,11937,25,153,12176,11976,12280,69,75,254,12240,113,77,120,12166,12255,12132,149,12169,228,12259,13,12068,12230,12263,49,147,12077,11985,11970,12275,12168,49,12129,152,12218,421,12239,216,12267,12237,12251,121,116,12182,28,12064,12174,151,12224,12140,243,12209,12253,12139,11803,252,12212,12280,12250,12140,12077,12069,12285,62,12122,12164,12093,11989,342,12109,12280,37,267,24,301,12122,12168,165,74,130,11897,365,231,12008,34,28,229,286,12218,221,74,12156,2,50,12278,12254,12268,12237,12237,86,12177,12155,12224,12174,12255,12251,304,12231,179,12219,12270,58,102,12288,60,132,17,12124,12283,12128,12177,12027,128,12219,12226,249,304,38,12004,273,76,159,34,12208,251,12168,12081,12176,12267,11969,12198,223,12090,65,200,12174,217,97,169,12273,39,386,11949,12,12155,25,84,12229,53,36,12243,12134,12097,139,52,70,12188,12107,12233,42,80,65,11837,12128,60,116,58,12216,12118,11978,100,211,12286,81,12133,114,24,252,12170,64,12276,33,12092,0,12239,12219,71,149,12136,11991,12199,67,129,11810,12172,103,12061,124,124,137,119,12161,12246,12201,272,12110,55,232,11974,147,440,12067,12118,335,12221,12286,12110,12212,12097,12046,35,312,12161,12261,259,12262,155,12211,12279,12187,12244,12259,12223,242,12194,124,144,12095,110,147,11983,295,8,162,11944,12210,157,12193,54,109,159,170,12083,12174,21,221,30,35,118,27,12154,12264,61,12207,12200,190,95,12075,50,12148,600,12122,12276,12214,91,140,199,12271,12134,12098,12248,11872,12285,12138,11881,296,12250,462,90,12161,11954,118,199,12149,289,237,22,12243,12249,12284,12162,1,70,11999,12262,45,12052,87,132,167,148,185,4,12016,73,12112,72,160,50,144,101,12023,145,11996,12274,101,165,12249,12144,82,152,218,224,25,12081,12210,12205,12158,12166,12182,19,37,25,12285,251,33,12074,217,5,12219,120,12101,43,12252,12210,12143,12284,12262,300,12260,150,83,212,241,122,12225,32,44,12223,215,12146,12232,12038,12195,12282,12185,12263,30,24,12228,210,151,8,12265,18,496,12125,232,12227,11,0,37,15,6,12158,11983,38,12185,12040,12063,12227,12055,12252,12259,12160,188,204,12233,85,12267,124,12234,12006,258,12201,71,12224,12266];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Nicolas from ZKNOXtoo";
        sig.salt =
            "\x13\x57\x9b\x4e\xf5\xf6\xb6\x42\x65\x63\xd7\x19\x5b\x8c\x5b\x84\x73\x6b\x14\x26\x61\x60\x34\x2c\x40\x93\xf8\xab\xea\x48\x37\x1b\xa9\x4c\xc0\x6d\xcb\x6b\x8a\x8e";
        bool result = falcon.verify(message, sig, pk, false);
        assertEq(true, result);
    }

    function testVector3() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(82), 363,12149,12287,55,12245,48,61,162,12287,65,12276,11987,261,12217,12199,12198,12132,12241,26,11982,343,99,129,12101,12155,12103,12145,166,12130,209,11962,12244,113,150,173,12279,12013,192,201,12217,12209,12045,12243,12148,12231,54,12139,72,12100,49,12191,38,12042,12205,12203,12276,12024,12173,39,349,4,255,132,67,188,12087,12241,12193,12204,37,12279,12214,12279,105,196,108,196,12246,134,9,12168,12224,12026,12086,89,223,116,136,147,12134,12233,12050,387,136,22,12089,12116,167,90,12051,11867,28,12068,56,235,90,134,26,88,22,12155,157,12148,105,49,192,10,12065,307,12203,12183,12112,74,12146,128,39,174,12243,3,102,219,68,165,209,248,36,241,171,12193,59,129,316,12236,197,12,38,12165,12185,18,12278,168,12271,12256,12247,12188,20,222,104,12259,140,12211,12154,10,12120,39,98,12169,44,12269,48,148,119,12157,265,62,12179,11995,12133,12267,81,44,12286,117,135,12214,12228,12225,12024,44,12255,277,60,74,158,66,12162,11953,53,136,12247,84,12167,44,12202,183,46,130,60,12229,163,12224,12104,59,91,12174,87,12194,12090,170,63,38,12238,12176,12091,185,189,67,12189,95,221,125,138,12273,132,105,18,12167,65,125,172,32,58,83,43,12094,12240,11977,12218,169,12254,123,149,12233,53,12056,58,11918,146,133,12118,77,40,52,12231,35,21,12219,12278,12087,67,12060,42,12242,12236,12258,12248,38,12160,14,396,12284,12259,105,12151,12159,122,11778,217,12120,12202,165,2,150,12119,12037,12278,12231,12284,299,12264,12236,39,12204,12243,12150,12257,12192,12169,233,36,207,12013,12077,12222,70,12037,389,123,12180,285,99,12225,211,359,12218,12221,12071,198,12155,154,12120,12053,9,90,12238,12220,224,118,19,12250,12006,12031,292,131,12184,1,45,12228,156,12079,12218,12176,154,105,87,12137,111,15,12019,12218,128,155,108,12149,12093,12150,11911,12069,12284,50,12195,87,12202,12071,11989,83,12248,12219,394,178,12170,262,23,12102,271,156,52,12178,12232,12252,190,12125,11859,12248,270,12254,169,12248,52,12254,36,124,12182,4,51,312,75,129,12130,12272,120,91,64,12214,154,11939,53,12280,12206,188,135,12126,12159,12278,107,12284,12123,18,76,12194,12240,12165,19,12036,12039,12192,12171,78,12066,149,159,46,12193,19,12259,12247,128,64,163,117,313,12213,12235,42,12285,11986,12262,12267,12256,12264,12147,111,145,415,146,12216,12165,12105,11944,12283,12120,106,401,151,52,12212,12087,12162,12131,207,88,55,126,12081,11767,73,12135,5,12033,150,12130,12185,12214,209,12162,92,12261,12239,12245,12125,70,12237,12251,84,134,276,48,12179,231,12227,12211];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "We are ZKNox, you already know!!";
        sig.salt =
            "\x5a\x54\x83\x5f\x8b\x04\xd4\xc0\xb2\x96\x67\xba\xeb\x0c\x32\x58\x80\x9e\xe6\x98\xdb\xc0\x35\x36\xa1\xc9\x36\xc8\x11\xf6\xe6\xf6\x92\x10\xf5\x63\x20\x80\x06\x49";
        bool result = falcon.verify(message, sig, pk, false);
        assertEq(true, result);
    }

    function testVector4() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(90), 12285,12152,12163,12276,12034,29,12066,12251,166,118,48,117,18,26,12220,12248,144,12212,12210,90,12164,117,29,161,140,135,12154,294,328,12036,193,12147,104,21,73,12099,326,11945,12221,12219,12193,36,324,6,11990,12288,12075,12228,12214,12236,12238,90,110,207,12126,12172,12257,188,146,12104,385,73,12219,10,12178,174,211,12285,121,12247,186,12234,95,300,100,206,178,12154,274,12166,12075,12179,11950,372,12233,12101,12132,45,12147,31,167,12122,179,5,12213,12208,12040,12281,279,12160,11926,12227,12131,56,12228,1,12265,56,12224,12242,12277,307,12161,12256,402,25,11990,157,12256,134,12264,12158,12272,12012,12268,12214,22,12216,12027,12070,289,119,45,12268,12112,340,12099,11987,40,16,250,158,153,206,60,12137,13,401,12167,104,406,12171,12196,12135,12148,71,12260,12210,12157,12079,120,11916,12240,12089,12200,99,12097,118,7,12250,301,12277,150,148,64,12234,12117,11997,12275,120,131,12030,12101,12191,163,12179,11953,12230,118,19,135,61,12157,41,319,12107,12239,268,12216,69,423,50,200,173,173,89,113,165,12257,128,299,271,12229,12201,133,12065,12150,12070,144,86,12122,12204,12151,12132,12261,395,12275,12058,122,153,12202,245,12035,12198,181,12022,12222,12173,12111,180,264,12062,4,11876,138,166,209,271,12196,138,12119,12017,12269,110,12231,11857,12197,12220,41,12042,12086,66,11,11996,12215,11963,12287,12277,161,12204,79,112,317,42,11846,12277,67,12182,12134,89,186,17,6,12208,128,98,12080,12168,202,103,79,12193,85,12175,12156,12168,11971,12162,12015,6,57,12081,255,12117,12192,25,12040,111,12197,138,351,12168,266,12193,166,12223,12272,147,12218,65,12266,96,30,11993,12141,241,12174,89,12208,12280,12082,116,11912,14,12089,47,23,10,12263,12246,90,12267,8,313,12223,12046,135,11924,122,29,12172,52,18,278,12185,225,12137,12179,16,12081,12102,116,12143,12011,12219,12251,81,12214,12087,12286,12145,241,12175,12250,12224,127,183,12204,21,53,11995,274,163,12252,294,185,12210,128,310,78,70,356,11957,85,219,83,11959,12103,3,12140,300,12195,12027,12272,44,208,12160,209,12171,225,12220,29,231,12281,85,106,12154,12211,12287,90,22,12085,11988,12204,20,12121,282,12235,25,163,12268,12007,12139,12243,12230,12055,125,297,88,12116,105,38,12267,12244,12249,12100,56,211,90,12133,12012,12099,12092,12236,176,12231,12060,65,90,12216,12265,11989,12158,82,12266,12200,58,48,12258,18,12058,11991,12226,12184,11968,199,12236,12273,63,12142,105,12012,119,12233,12275,12228,7,25,12236,12115,12126,12262,12253,12135,90,95,12251,22,12265,12033,12229,12284,12224,12139,12237,12231,167,12227,47,12276,233];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "Practical security on the chain.";
        sig.salt =
            "\xc3\xff\x24\xbc\x6b\x6d\x7a\x3d\x30\x7c\xe7\xb1\x73\x1e\x7d\xf5\x96\x90\xd0\x53\x0d\x7f\x2f\x5b\xb9\xed\x37\xd1\x80\x16\x9a\x6c\x1b\xb0\x22\x25\x2a\xb8\xcc\x68";
        bool result = falcon.verify(message, sig, pk, false);
        assertEq(true, result);
    }
}
