// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import "../src/ZKNOX_IVerifier.sol";
import "../src/ZKNOX_delegate_7702.sol";

import "../src/ZKNOX_ethfalcon.sol";
import "../src/ZKNOX_falcon_deploy.sol";

import {console, Test} from "forge-std/Test.sol";

import "forge-std/Vm.sol";

//simple ERC20 for the demonstration
contract ERC20 {
    address public minter;
    mapping(address => uint256) private _balances;

    constructor(address _minter) {
        minter = _minter;
    }

    function mint(uint256 amount, address to) public {
        _mint(to, amount);
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function _mint(address account, uint256 amount) internal {
        require(msg.sender == minter, "ERC20: msg.sender is not minter"); //comment until delegation works
        console.log("message sender:", msg.sender);
        require(account != address(0), "ERC20: mint to the zero address");
        unchecked {
            _balances[account] += amount;
        }
    }

    function _acknowledge(bytes memory data) public pure returns (string memory res) {
        return string(abi.encodePacked(data, "\n was successfully signed!"));
    }
}

contract CallExecutor {
    function executeCall(
        address verifier,
        address token,
        bytes memory data,
        uint256 value,
        bytes memory salt,
        uint256[] memory s2
    ) external {
        console.log("Verifier:", verifier);
        console.log("Token:", token);
        console.logBytes(data);
        console.log("Value:", value);
        console.logBytes(salt);
        console.log("S2 Length:", s2.length);

        // Direct `call`, ensuring Verifier's storage is accessed instead of Alice's
        (bool success, bytes memory returnData) = verifier.call(
            abi.encodeWithSignature("transact(address,bytes,uint256,bytes,uint256[])", token, data, value, salt, s2)
        );
        require(success, "Call to Verifier failed");
    }
}

contract SignDelegationTest is Test {
    // Alice's address and private key (EOA with no initial contract code).
    address payable ALICE_ADDRESS = payable(0x70997970C51812dc3A010C7d01b50e0d17dc79C8);
    uint256 constant ALICE_PK = 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d;

    // Bob's address and private key (Bob will execute transactions on Alice's behalf).
    address constant BOB_ADDRESS = 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC;
    uint256 constant BOB_PK = 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a;
    // Deployer's address and private key (used to deploy contracts).
    address private constant DEPLOYER_ADDRESS = 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720;
    uint256 private constant DEPLOYER_PK = 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6;

    // The contract that Alice will delegate execution to.

    ZKNOX_ethfalcon public falcon;
    ZKNOX_Verifier Verifier;

    // ERC-20 token contract for minting test tokens.
    ERC20 public token;

    function setUp() public {
        // Deploy the delegation contract (Alice will delegate calls to this contract).

        falcon = new ZKNOX_ethfalcon();
        // public key in ntt form
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = ZKNOX_memcpy32(tmp_pkc);
        uint256 iAlgoID = FALCONSHAKE_ID;

        bytes32 salty = keccak256(abi.encodePacked("ZKNOX_v0.14"));

        address iVerifier_algo = address(falcon);
        address iPublicKey = DeployPolynomial(salty, pkc);

        Verifier = new ZKNOX_Verifier();

        // Alice signs a delegation allowing `implementation` to execute transactions on her behalf.
        Vm.SignedDelegation memory signedDelegation = vm.signDelegation(address(Verifier), ALICE_PK);

        vm.attachDelegation(signedDelegation);
        ZKNOX_Verifier aliceVerifier = ZKNOX_Verifier(ALICE_ADDRESS);
        aliceVerifier.initialize(iAlgoID, iVerifier_algo, iPublicKey);
        console.log(
            "param Verifier:", aliceVerifier.algoID(), aliceVerifier.CoreAddress(), aliceVerifier.authorizedPublicKey()
        );

        // Deploy an ERC-20 token contract where Alice is the minter.
        token = new ERC20(ALICE_ADDRESS);
    }

    function testDelegate() public {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = ZKNOX_memcpy32(tmp_pkc);

        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [189061025430138993865854805011532069333293715869299695949354293295109767338, 309200829492683618362801840838735315073239679824516877254610688296907178015, 17669203565873415420439226729611576544749443656481276334890396524208467774, 21567902685951065342220093337212015325627859479836552266578154972738260959272, 21629742710641854202617034886213873892640485268970955124070672848858167127875, 21518761173595649991077541634911872372568563460460287375282464679909027151878, 88668843202050080354162430362465493400899326659627631899251092744825352121, 21589115041612929508944530253353887521990674352656231997732268725231305949408, 77748037816609010048821043986758852741763365848433569238103440621543948394, 196125604980477431416529085554673976708993318735365421874476849166068940885, 21444227575187532861933165945345576589177205410775875437029272647414716641113, 21571766779137214249890997998635625679180679668367453624699784252197002280960, 132842791722068690864021037096966919030178447937701691660884444009250095184, 252660618073406522895016361327352646221166102604901000414436689373735890818, 21661875898514585455300483231269254543688174841797784277884596070553710964571, 408469887372575727764354863939787898486221033046251585808276641395393310697, 21483098798806565528090561173471573130149923357778077129069435100923827138387, 21365040707017283224032169374693579384647805515287338499452209675962376454353, 139582082355163817792446396090827957258977980096747497728717346717617488024, 21698977390374140751926738932285965733024723476130692021975378126228657012810, 21582043479534721231928031949222680268801040592884446810862621247728671654012, 106016188978695213660006561000087639649638405319762547008619378770056380540, 21396523669988578255532519494435324598773577619532813394543061212841669504837, 567487142710691728457912662951684626851937150493245889102477722465050636084, 185844569086061214504135130584456987157183142589951887136070171885834153901, 350162015184944149647336545709148596957881292049384682934039156939714199637, 56868125263755762880306655715105756108612883350558868787549471782918631255, 113409366200701537080466339400905201724440194357091543728319651397816025091, 598968924407998825190710488524458442266573561012338161932509137359297720206, 21524058349737765174490280399545977619713148567855354072883708688105677467568, 21592968836075103278633512472085925061228035841536899495353847705011755429638, 224400819594214410949880090102269951771459564115310187818733077437072605190];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Renaud";
        bytes memory salt =
            "\x46\xb9\xdd\x2b\x0b\xa8\x8d\x13\x23\x3b\x3f\xeb\x74\x3e\xeb\x24\x3f\xcd\x52\xea\x62\xb8\x1b\x82\xb5\x0c\x27\x64\x6e\xd5\x76\x2f\xd7\x5d\xc4\xdd\xd8\xc0\xf2\x00";
        bool result = falcon.verify(message, salt, s2, pkc);
        assertEq(true, result);

        vm.startBroadcast(ALICE_PK);

        // Debug: Print stored values to verify correct setup
        console.log(
            "Stored authorizedPublicKey at Alice:",
            address(uint160(uint256(vm.load(ALICE_ADDRESS, bytes32(uint256(0))))))
        );
        console.log(
            "Stored CoreAddress at Alice:", address(uint160(uint256(vm.load(ALICE_ADDRESS, bytes32(uint256(1))))))
        );
        console.log("Stored algoID at Alice:", uint256(vm.load(ALICE_ADDRESS, bytes32(uint256(2)))));
        console.log("Stored nonce at Alice:", uint256(vm.load(ALICE_ADDRESS, bytes32(uint256(3)))));

        // As Bob, execute the transaction via Alice's temporarily assigned contract.
        vm.stopBroadcast();

        vm.broadcast(BOB_PK);
        bytes memory code = address(ALICE_ADDRESS).code; //this shall be ef0100, followed by adress

        console.log("Verifier address:%x", uint256(uint160(address(Verifier))));

        console.log("code written at eoa Alice:");
        console.logBytes(code);

        // Verify that Alice's account now temporarily behaves as a smart contract.
        require(code.length > 0, "no code written to Alice");

        // As Bob, execute the transaction via Alice's temporarily assigned contract.
        bool isValid = ZKNOX_Verifier(ALICE_ADDRESS).isValid(message, salt, s2); //final delegation test
        console.log("signature result:", isValid);
    }
}
